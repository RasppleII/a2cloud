#! /bin/bash
# vim: set tabstop=4 shiftwidth=4 expandtab filetype=sh:

version="190"
adtProVersion="2.0.1"

#DISABLE# # Ensure URL we'll use ends in a /
#DISABLE# case "$A2CLOUD_SCRIPT_URL" in
#DISABLE#     */) scriptURL="$A2CLOUD_SCRIPT_URL" ;;
#DISABLE#     *) scriptURL="${A2CLOUD_SCRIPT_URL:-http://appleii.ivanx.com/a2cloud}/" ;;
#DISABLE# esac
#DISABLE# 
#DISABLE# ## ID-bashbyter routines
#DISABLE# 
#DISABLE# binToDec () {
#DISABLE# # converts single-byte binary string (8 bits) value to decimal
#DISABLE# # warning: no error checking
#DISABLE# # arg: binary string up to 8 bits
#DISABLE# # out: decimal value
#DISABLE#     dec=0
#DISABLE#     bits=$1
#DISABLE#     while (( ${#bits} < 8 )); do
#DISABLE#         bits="0$bits"
#DISABLE#     done
#DISABLE#         for n in {0..7}; do
#DISABLE#         (( dec+=( ${bits:$n:1} * ( 2**(7-$n) ) ) ))
#DISABLE#     done
#DISABLE#     echo -n $dec
#DISABLE# }
#DISABLE# 
#DISABLE# writecharDec () {
#DISABLE# # write corresponding character of single-byte decimal value into file
#DISABLE# # arg1: filename
#DISABLE# # arg2: offset (# of bytes to skip before writing)
#DISABLE# # arg3: decimal number from 0-255
#DISABLE# # exit: 8=extraneous arg, 11=missing arg1, 12=missing arg2,
#DISABLE# #       13=missing arg3, 22=invalid arg2, 23=invalid arg3
#DISABLE# #  out: nothing
#DISABLE#     [[ $1 ]] || return 11; [[ $2 ]] || return 12; [[ $3 ]] || return 13
#DISABLE#     [[ $4 ]] && return 8
#DISABLE#     [[ ( $(printf %d "$2" 2> /dev/null) == $2 ) \
#DISABLE#      && ( $2 -ge 0 ) ]] || return 22
#DISABLE#     [[ ( $(printf %d "$3" 2> /dev/null) == $3 ) \
#DISABLE#      && ( $3 -ge 0 ) && ( $3 -lt 255 ) ]] || return 23
#DISABLE#     # args are valid
#DISABLE#     echo -n -e "\x$(printf %02X "$3")" | \
#DISABLE#     dd of="$1" bs=1 seek=$(($2)) conv=notrunc 2> /dev/null
#DISABLE# }
#DISABLE# 
#DISABLE# writecharsHex () {
#DISABLE# # write corresponding characters of hex values into file
#DISABLE# # arg1: filename
#DISABLE# # arg2: offset (# of bytes to skip before writing)
#DISABLE# # arg3: string of two-digit hexadecimal numbers from 00-FF, period delimited (not checked!)
#DISABLE# #  out: nothing
#DISABLE# # exit: 8=extraneous arg, 11=missing arg1, 12=missing arg2,
#DISABLE# #       13=missing arg3, 22=invalid arg2, 23=invalid arg3
#DISABLE#     [[ $1 ]] || return 11; [[ $2 ]] || return 12; [[ $3 ]] || return 13
#DISABLE#     [[ $4 ]] && return 8
#DISABLE#     [[ ( $(printf %d "$2" 2> /dev/null) == $2 ) \
#DISABLE#     && ( $2 -ge 0 ) ]] || return 22
#DISABLE#     p=0
#DISABLE#     offset=$2
#DISABLE#     len=${#3}
#DISABLE#     while (( p < len )); do
#DISABLE#         outByte=${3:$p:2}
#DISABLE#         [[ $(printf %02X "0x$outByte" 2> /dev/null) == \
#DISABLE#         $(echo -n "$outByte" | tr [a-z] [A-Z]) ]] || return 23
#DISABLE#         # args are valid
#DISABLE#         echo -n -e "\x$outByte" | \
#DISABLE#         dd of="$1" bs=1 seek=$offset conv=notrunc 2> /dev/null
#DISABLE#         (( p += 3 ))
#DISABLE#         (( offset++ ))
#DISABLE#     done
#DISABLE# }
#DISABLE# 
#DISABLE# # A2CLOUD installer start
#DISABLE# 
#DISABLE# isRpi=
#DISABLE# [[ -f /usr/bin/raspi-config ]] && isRpi=1
#DISABLE# [[ $isRpi ]] && { me="Pi"; fullme="Raspberry Pi"; } || { me="computer"; fullme="computer"; }
#DISABLE# 
#DISABLE# isDebian=
#DISABLE# [[ ( -f /etc/debian_version ) && ( $(cut -c 1-2 < /etc/debian_version) == "7." ) && ( $(uname -m) == "i686" ) ]] && isDebian=1
#DISABLE# 
#DISABLE# if [[ -f /usr/local/etc/A2CLOUD-version ]]; then
#DISABLE#     echo "A2CLOUD version available: $version"
#DISABLE#     echo "A2CLOUD version installed: $(cat /usr/local/etc/A2CLOUD-version)"
#DISABLE# fi
#DISABLE# 
#DISABLE# args="$@"
#DISABLE# 
#DISABLE# buildA2CloudDisk=
#DISABLE# downloadBinaries=1
#DISABLE# noA2PiExtras=
#DISABLE# skipRepoUpdate=
#DISABLE# restartPrompt=
#DISABLE# autoAnswerYes=
#DISABLE# updateRasppleII=
#DISABLE# slot6=
#DISABLE# noSetGroups=
#DISABLE# while [[ $1 ]]; do
#DISABLE#     if [[ $1 == "-b" ]]; then
#DISABLE#         shift
#DISABLE#         buildA2CloudDisk=1
#DISABLE#     elif [[ $1 == "-c" ]]; then
#DISABLE#         shift
#DISABLE#         downloadBinaries=
#DISABLE#     elif [[ $1 == "-p" ]]; then
#DISABLE#         shift
#DISABLE#         noA2PiExtras=1
#DISABLE#     elif [[ $1 == "-r" ]]; then
#DISABLE#         shift
#DISABLE#         skipRepoUpdate="-r"
#DISABLE#     elif [[ $1 == "-s" ]]; then
#DISABLE#         shift
#DISABLE#         restartPrompt=1
#DISABLE#     elif [[ $1 == "-y" ]]; then
#DISABLE#         shift
#DISABLE#         autoAnswerYes="-y"
#DISABLE#     elif [[ $1 == "-6" ]]; then
#DISABLE#         shift
#DISABLE#         slot6=1
#DISABLE#     elif [[ $1 == "-os" || $1 == "os" ]]; then
#DISABLE#         shift
#DISABLE#         updateRasppleII=1
#DISABLE#     elif [[ $1 == "-v" ]]; then
#DISABLE#         shift
#DISABLE#         if [[ ! -f /usr/local/etc/A2CLOUD-version ]]; then
#DISABLE#             echo "A2CLOUD version available: $version"
#DISABLE#             echo "A2CLOUD version installed: none"
#DISABLE#         fi
#DISABLE#         [[ $0 == "-bash" ]] && return 1 || exit 1
#DISABLE#     elif [[ $1 == "noSetGroups" ]]; then
#DISABLE#         shift
#DISABLE#         noSetGroups=1
#DISABLE#     elif [[ $1 ]]; then
#DISABLE#         echo "options:"
#DISABLE#         echo "-v: display installed and available versions, then exit"
#DISABLE#         echo "-y: auto-answer yes to all prompts"
#DISABLE#         echo "-r: don't update package lists"
#DISABLE#         echo "-s: prompt for restart after installation"
#DISABLE#         echo "-6: put blank 140K disk images in GSport and KEGS slot 6"
#DISABLE#         echo "-b: build A2CLOUD disks, rather than downloading premade images"
#DISABLE#         echo "-c: compile non-package items, rather than downloading binaries"
#DISABLE#         if [[ $isRpi ]]; then
#DISABLE#             echo "-p: don't install Apple II Pi extras"
#DISABLE#             echo "-os: update Raspbian OS, A2CLOUD, A2SERVER, and Apple II Pi"
#DISABLE#         fi
#DISABLE#         [[ $0 == "-bash" ]] && return 1 || exit 1
#DISABLE#     fi
#DISABLE# done
#DISABLE# 
#DISABLE# if [[ $updateRasppleII ]]; then
#DISABLE#     echo "A2CLOUD: Updating Raspple II (takes up to an hour)..."
#DISABLE#     wget -qO /tmp/raspbian-update ${scriptURL}setup/raspbian-update.txt
#DISABLE#     source /tmp/raspbian-update a2cloud a2server $autoAnswerYes $skipRepoUpdate
#DISABLE#     [[ $0 == "-bash" ]] && return 0 || exit 0
#DISABLE# fi
#DISABLE# 
#DISABLE# echo
#DISABLE# echo "Your $fullme will be set up for A2CLOUD, providing you"
#DISABLE# echo "  with mass storage and online access for your Apple II!"
#DISABLE# echo
#DISABLE# echo "Answer yes to all prompts if you want to be able to do all the"
#DISABLE# echo "  stuff mentioned on the A2CLOUD web site."
#DISABLE# echo
#DISABLE# echo "If you already have A2CLOUD installed, you will be updated to the"
#DISABLE# echo "  latest version. Check out http://ivanx.com/a2cloud for details."
#DISABLE# echo
#DISABLE# echo "Full installation may take an hour or longer. Updates are usually"
#DISABLE# echo "  much quicker. Type 'a2cloud-setup -h' for installation options."
#DISABLE# echo
#DISABLE# echo "Some actions will be performed as the root user."
#DISABLE# if [[ ! $autoAnswerYes ]]; then
#DISABLE#     echo
#DISABLE#     echo -n "Continue? "
#DISABLE#     read
#DISABLE#     if [[ ${REPLY:0:1} != "Y" && ${REPLY:0:1} != "y" ]]; then
#DISABLE#         [[ $0 == "-bash" ]] && return 2 || exit 2
#DISABLE#     fi
#DISABLE# fi
#DISABLE# 
#DISABLE# echo
#DISABLE# installAllFeatures=
#DISABLE# if [[ ! $autoAnswerYes ]]; then
#DISABLE#     echo
#DISABLE#     echo -n "Do you want to install all A2CLOUD features? "
#DISABLE#     read
#DISABLE# fi
#DISABLE# [[ $autoAnswerYes || ${REPLY:0:1} == "Y" || ${REPLY:0:1} == "y" ]] && installAllFeatures=1
#DISABLE# 
#DISABLE# if [[ $installAllFeatures ]]; then
#DISABLE#     installADTPro=1
#DISABLE#     createBootDisk=1
#DISABLE#     setupSerialPortLogin=1
#DISABLE#     installCommTools=1
#DISABLE#     installArchiveTools=1
#DISABLE#     installEmulators=1
#DISABLE#     [[ $isRpi ]] && installA2Pi=1 || installA2Pi=
#DISABLE# else
#DISABLE#     installADTPro=
#DISABLE#     echo
#DISABLE#     echo -n "Install ADTPro server, for virtual drives and floppy disk transfers"
#DISABLE#     if ! command -v X >/dev/null; then
#DISABLE#         echo
#DISABLE#         echo -n "(the X Window System and LXDE desktop environment will be installed)"
#DISABLE#     fi
#DISABLE#     echo -n "? "
#DISABLE#     read
#DISABLE#     [[ ${REPLY:0:1} == "Y" || ${REPLY:0:1} == "y" ]] && installADTPro=1
#DISABLE# 
#DISABLE#     createBootDisk=
#DISABLE#     installArchiveTools=
#DISABLE#     newImageName=
#DISABLE#     imageSize=
#DISABLE#     if [[ $installADTPro ]]; then
#DISABLE# 
#DISABLE#         echo
#DISABLE#         echo -n "Do you want to create A2CLOUD 140K and 800K boot disk images? "
#DISABLE#         read
#DISABLE#         if [[ ${REPLY:0:1} == "Y" || ${REPLY:0:1} == "y" ]]; then
#DISABLE#             createBootDisk=1
#DISABLE#             installArchiveTools=1
#DISABLE#         fi
#DISABLE# 
#DISABLE#         if [[ ! -f /usr/local/adtpro/disks/Virtual.po || ( -f /usr/local/adtpro/adtpro.sh && -f /usr/local/adtpro/disks/Virtual.po && $(sha1sum /usr/local/adtpro/disks/Virtual.po | cut -f 1 -d ' ') == "a209a8b3a485c95c57bc691a8a58867a6c0ec628" ) ]]; then
#DISABLE#             while (( 1 )); do
#DISABLE#                 echo
#DISABLE#                 echo "The default blank disk in S2,D1 will be 800K. If you want a different size,"
#DISABLE#                 echo -n "  enter it in K (larger is slower when writing; max 8192): "
#DISABLE#                 read
#DISABLE#                 if (( ${REPLY}0 >= 1400 )); then
#DISABLE#                     imageSize=$REPLY
#DISABLE#                     echo -n "Enter new image file name: "
#DISABLE#                     read
#DISABLE#                     if [[ $REPLY ]]; then
#DISABLE#                         reply="$REPLY"
#DISABLE#                         [[ $(tr [:lower:] [:upper:] <<< ${reply:(-3)}) != ".PO" ]] && reply="$REPLY.PO"
#DISABLE#                         if [[ ! -f /usr/local/adtpro/disks/"$reply" ]]; then
#DISABLE#                             newImageName="$reply"
#DISABLE#                             prodosVolName='0'
#DISABLE#                             # test ProDOS name legality
#DISABLE#                             while [[ ${#prodosVolName} -gt 15 || ! $(grep ^[A-Z][0-9A-Z\.]*$ <<< $prodosVolName) ]]; do
#DISABLE#                                 echo -n "Enter new image ProDOS volume name (or return for 'UNTITLED'): "
#DISABLE#                                 read
#DISABLE#                                 [[ $REPLY ]] && prodosVolName="$REPLY" || prodosVolName="UNTITLED"
#DISABLE#                                 prodosVolName=$(tr [:lower:] [:upper:] <<< $prodosVolName)
#DISABLE#                             done
#DISABLE#                             break
#DISABLE#                         else
#DISABLE#                             echo "A2CLOUD: Disk image already exists. Not creating."
#DISABLE#                         fi
#DISABLE#                     fi
#DISABLE#                 else
#DISABLE#                     break
#DISABLE#                 fi
#DISABLE#             done
#DISABLE#         fi
#DISABLE#     fi
#DISABLE# 
#DISABLE#     setupSerialPortLogin=
#DISABLE#     echo
#DISABLE#     echo -n "Do you want to set up your $me for serial port login? "
#DISABLE#     read
#DISABLE#     [[ ${REPLY:0:1} == "Y" || ${REPLY:0:1} == "y" ]] && setupSerialPortLogin=1
#DISABLE# 
#DISABLE#     installCommTools=
#DISABLE#     echo
#DISABLE#     echo -n "Install internet access and file transfer tools on your $me? "
#DISABLE#     read
#DISABLE#     [[ ${REPLY:0:1} == "Y" || ${REPLY:0:1} == "y" ]] && installCommTools=1
#DISABLE# 
#DISABLE#     if [[ ! $installArchiveTools ]]; then
#DISABLE#         echo
#DISABLE#         echo -n "Install utilities for Apple II archives and disk images? "
#DISABLE#         read
#DISABLE#         [[ ${REPLY:0:1} == "Y" || ${REPLY:0:1} == "y" ]] && installArchiveTools=1
#DISABLE#     fi
#DISABLE# 
#DISABLE#     installEmulators=
#DISABLE#     echo
#DISABLE#     echo -n "Install Apple IIgs and IIe emulators? "
#DISABLE#     read
#DISABLE#     [[ ${REPLY:0:1} == "Y" || ${REPLY:0:1} == "y" ]] && installEmulators=1
#DISABLE# 
#DISABLE#     installA2Pi=
#DISABLE#     if [[ $isRpi ]]; then
#DISABLE#         echo
#DISABLE#         echo -n "Install Apple II Pi? "
#DISABLE#         read
#DISABLE#         [[ ${REPLY:0:1} == "Y" || ${REPLY:0:1} == "y" ]] && installA2Pi=1
#DISABLE#     fi
#DISABLE# fi
#DISABLE# 
#DISABLE# echo
#DISABLE# userPw=$(sudo grep "^$USER" /etc/shadow | cut -f 2 -d ':')
#DISABLE# [[ $userPw == "$(echo 'apple2' | perl -e '$_ = <STDIN>; chomp; print crypt($_, $ARGV[0])' "${userPw%"${userPw#\$*\$*\$}"}")" ]] && isApple2Pw=1 || isApple2Pw=
#DISABLE# [[ $userPw == "$(echo 'raspberry' | perl -e '$_ = <STDIN>; chomp; print crypt($_, $ARGV[0])' "${userPw%"${userPw#\$*\$*\$}"}")" ]] && isRaspberryPw=1 || isRaspberryPw=
#DISABLE# 
#DISABLE# if [[ ! $isApple2Pw && ! -f /usr/local/etc/A2CLOUD-version ]]; then
#DISABLE#     if [[ ! $autoAnswerYes ]]; then
#DISABLE#         echo "To make A2CLOUD work smoothly, you are recommended"
#DISABLE#         echo "to change your password to 'apple2'."
#DISABLE#         echo
#DISABLE#         echo -n "Do you want to change the password for user '$USER' to 'apple2' now? "
#DISABLE#         read
#DISABLE#     fi
#DISABLE#     if [[ $autoAnswerYes || ${REPLY:0:1} == "Y" || ${REPLY:0:1} == "y" ]]; then
#DISABLE#         echo "A2CLOUD: changing password for user '$USER' to 'apple2'..."
#DISABLE#         echo "$USER:apple2" | sudo chpasswd
#DISABLE#         isApple2Pw=1
#DISABLE#     fi
#DISABLE# fi
#DISABLE# thePassword="your password"
#DISABLE# [[ $isApple2Pw ]] && thePassword="'apple2'"
#DISABLE# [[ $isRaspberryPw ]] && thePassword="'raspberry'"
#DISABLE# 
#DISABLE# 
#DISABLE# echo
#DISABLE# echo "During this installation, enter ${thePassword}"
#DISABLE# echo "if prompted for passwords."
#DISABLE# echo
#DISABLE# if [[ ! $autoAnswerYes ]]; then
#DISABLE#     echo -n "Press return to continue..."
#DISABLE#     read
#DISABLE# fi
#DISABLE# 
#DISABLE# 
#DISABLE# origDir="$PWD"
#DISABLE# rm -rf /tmp/a2cloud-install &> /dev/null
#DISABLE# mkdir -p /tmp/a2cloud-install
#DISABLE# cd /tmp/a2cloud-install
#DISABLE# 
#DISABLE# echo
#DISABLE# if [[ ! $skipRepoUpdate ]]; then
#DISABLE#     echo "A2CLOUD: Updating package lists..."
#DISABLE#     sudo apt-get -y update > /dev/null
#DISABLE# else
#DISABLE#     echo "A2CLOUD: Not updating package lists..."
#DISABLE# fi
#DISABLE# 
#DISABLE# 
#DISABLE# # general commands and configuration
#DISABLE# 
#DISABLE# echo "A2CLOUD: Adding udev trigger to /etc/rc.local..."
#DISABLE# grep udevadm /etc/rc.local > /dev/null || sudo sed -i 's/^exit 0$/[ -e \/dev\/ttyUSBupper ] \&\& ! [ -f \/tmp\/udev-ttyUSBupper-added ] \&\& udevadm trigger --action=change\n[ -e \/dev\/ttyUSBlower ] \&\& ! [ -f \/tmp\/udev-ttyUSBlower-added ] \&\& udevadm trigger --action=change\n\nexit 0/' /etc/rc.local
#DISABLE# 
#DISABLE# echo "A2CLOUD: Setting up dopo command..."
#DISABLE# sudo wget -qO /usr/local/bin/dopo ${scriptURL}setup/dopo.txt
#DISABLE# sudo chmod ugo+x /usr/local/bin/dopo
#DISABLE# 
#DISABLE# echo "A2CLOUD: Setting up cppo command..."
#DISABLE# sudo wget -qO /usr/local/bin/cppo ${scriptURL}setup/cppo.txt
#DISABLE# sudo chmod ugo+x /usr/local/bin/cppo
#DISABLE# 
#DISABLE# echo "A2CLOUD: Setting up a2cloud-help..."
#DISABLE# sudo wget -qO /usr/local/etc/a2cloud-help.txt ${scriptURL}setup/a2cloud-help.txt
#DISABLE# if [[ $isRpi ]]; then
#DISABLE#     sudo sed -i 's/^gsport.*$/gsport : GSport Apple IIgs emulator (or log in with user "apple2user")/' /usr/local/etc/a2cloud-help.txt
#DISABLE# fi
#DISABLE# 
#DISABLE# # FIXME: We have "three" MOTD files in the A2CLOUD tree but we only use
#DISABLE# # one.  The other two come from the Raspple II tree.  We should clean
#DISABLE# # this up at some point.
#DISABLE# echo "A2CLOUD: Setting up motd..."
#DISABLE# if [[ $(grep Raspple /etc/motd) ]]; then
#DISABLE#     wget -qO- http://appleii.ivanx.com/rasppleii/motd-rasppleii.txt | sudo tee /etc/motd > /dev/null
#DISABLE# elif [[ $(grep A2SERVER /etc/motd) ]]; then
#DISABLE#     wget -qO- http://appleii.ivanx.com/rasppleii/motd-vm.txt | sudo tee /etc/motd > /dev/null
#DISABLE# else
#DISABLE#     wget -qO- ${scriptURL}setup/motd.txt | sudo tee /etc/motd > /dev/null
#DISABLE# fi
#DISABLE# 
#DISABLE# if { lspci 2> /dev/null | grep -q VirtualBox; }; then
#DISABLE#     echo "A2CLOUD: Disabling VirtualBox console screen blanking..."
#DISABLE#     sudo sed -i 's/^BLANK_DPMS=off/BLANK_DPMS=on/' /etc/kbd/config
#DISABLE#     sudo sed -i 's/^BLANK_TIME=[^0].$/BLANK_TIME=0/' /etc/kbd/config
#DISABLE#     sudo /etc/init.d/kbd restart &> /dev/null
#DISABLE#     sudo /etc/init.d/console-setup restart &> /dev/null
#DISABLE# fi
#DISABLE# 
#DISABLE# echo "A2CLOUD: Setting up control commands and environment variables..."
#DISABLE# sudo wget -qO /usr/local/etc/a2cloud-aliases ${scriptURL}setup/a2cloud-aliases.txt
#DISABLE# echo "A2CLOUD: Setting up login script..."
#DISABLE# sudo sed -i "s/a2cloud-aliases/a2cloudrc/" /etc/bash.bashrc
#DISABLE# sudo sed -i '/ttyUSB/d' /etc/bash.bashrc
#DISABLE# [[ ! $(grep a2cloudrc /etc/bash.bashrc) ]] && echo "source /usr/local/etc/a2cloudrc" | sudo tee -a /etc/bash.bashrc > /dev/null
#DISABLE# sudo wget -qO /usr/local/etc/a2cloudrc ${scriptURL}setup/a2cloudrc.txt
#DISABLE# source /usr/local/etc/a2cloudrc
#DISABLE# 
#DISABLE# echo "A2CLOUD: Saving installer version..."
#DISABLE# echo "$version" | sudo tee /usr/local/etc/A2CLOUD-version &> /dev/null
#DISABLE# 
#DISABLE# if ! dpkg-query -l avahi-daemon &>/dev/null || ! dpkg-query -l libnss-mdns &>/dev/null; then
#DISABLE#     echo "A2CLOUD: Installing avahi-daemon (mDNS)..."
#DISABLE#     sudo apt-get -y install avahi-daemon &> /dev/null
#DISABLE#     sudo apt-get -y clean
#DISABLE#     sudo sed -i 's/^\(hosts.*\)$/\1 mdns/' /etc/nsswitch.conf
#DISABLE# else
#DISABLE#     echo "A2CLOUD: avahi-daemon (mDNS) is already installed."
#DISABLE# fi
#DISABLE# 
#DISABLE# if [[ $installADTPro ]]; then
#DISABLE# 
#DISABLE#     freeSpace=$(df / | tail -1 | awk '{ print $4 }')
#DISABLE#     java -version &> /dev/null
#DISABLE#     if (( $? == 127 && $freeSpace < 350000 )); then
#DISABLE#         echo "You do not have enough free space to install"
#DISABLE#         echo "Java, which is needed for ADTPro server."
#DISABLE#         if [[ $isRpi ]]; then
#DISABLE#             echo "If you haven't"
#DISABLE#             echo "yet expanded the file system to use the full capacity"
#DISABLE#             echo "of your SD card, type \"sudo raspi-config\" and do that."
#DISABLE#         else
#DISABLE#             echo "Free up some space."
#DISABLE#         fi
#DISABLE#         echo "Then try this installer again."
#DISABLE#         echo
#DISABLE#         [[ $0 == "-bash" ]] && return 3 || exit 3
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if ! command -v X >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing X Window System and LXDE..."
#DISABLE#         sudo apt-get -y install xorg lxde
#DISABLE#         sudo apt-get -y clean
#DISABLE#         # prevent automatically running at startup
#DISABLE#         sudo sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/GRUB_CMDLINE_LINUX_DEFAULT="text"/' /etc/default/grub
#DISABLE#         sudo update-grub
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: X Window System and LXDE are already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if { lspci 2> /dev/null | grep -q VirtualBox; }; then
#DISABLE#         if { ! grep -q default /etc/xdg/lxsession/LXDE/autostart; }; then
#DISABLE#             echo "A2CLOUD: Setting desktop to 800x600 in VirtualBox console (no Additions)..."
#DISABLE#             echo -e "\nxrandr --output default --mode 800x600" | sudo tee -a /etc/xdg/lxsession/LXDE/autostart > /dev/null
#DISABLE#         else
#DISABLE#             echo "A2CLOUD: Desktop already set to 800x600 in VirtualBox console (no Additions)."
#DISABLE#         fi
#DISABLE#         if { ! grep -q VBOX0 /etc/xdg/lxsession/LXDE/autostart; }; then
#DISABLE#             echo "A2CLOUD: Setting desktop to 800x600 in VirtualBox console (with Additions)..."
#DISABLE#             echo -e "\nxrandr --output VBOX0 --mode 800x600" | sudo tee -a /etc/xdg/lxsession/LXDE/autostart > /dev/null
#DISABLE#         else
#DISABLE#             echo "A2CLOUD: Desktop already set to 800x600 in VirtualBox console (with Additions)."
#DISABLE#         fi
#DISABLE#         echo "A2CLOUD: Disabling screensaver and screen blanking in VirtualBox LXDE..."
#DISABLE#         sudo sed -i 's/^\(@xscreensaver.*\)$/#\1\n\nxset s noblank\nxset s off\nxset -dpms\n/' /etc/xdg/lxsession/LXDE/autostart
#DISABLE#     fi
#DISABLE#     if [[ $isRpi ]]; then
#DISABLE#         sudo sed -i 's/^.*VBOX0.*$//' /etc/xdg/lxsession/LXDE/autostart 2> /dev/null
#DISABLE#         sudo sed -i 's/^.*VBOX0.*$//' /etc/xdg/lxsession/LXDE-pi/autostart 2> /dev/null
#DISABLE#     fi
#DISABLE# 
#DISABLE#     # install or update java
#DISABLE#     javaVersion=$(java -version 2>&1)
#DISABLE#     if [[ ( $? -eq 127 ) || ( $(head -1 <<< "$javaVersion" | cut -f 2 -d '.') -lt 8 ) ]]; then
#DISABLE#         echo "A2CLOUD: Installing Java (takes a while)..."
#DISABLE#         if [[ $isRpi ]]; then
#DISABLE#             if [[ $(apt-cache search '^oracle-java8-jdk$') ]]; then
#DISABLE#                 sudo apt-get -y install oracle-java8-jdk
#DISABLE#             else
#DISABLE#                 sudo apt-get -y install oracle-java7-jdk
#DISABLE#             fi
#DISABLE#             sudo apt-get -y clean
#DISABLE#         else
#DISABLE#             # from http://www.webupd8.org/2012/06/how-to-install-oracle-java-7-in-debian.html
#DISABLE#             if { ! grep -q webupd8team /etc/apt/sources.list; }; then
#DISABLE#                 {
#DISABLE#                     echo;
#DISABLE#                     echo "# Oracle Java JDK";
#DISABLE#                     echo "deb http://ppa.launchpad.net/webupd8team/java/ubuntu precise main";
#DISABLE#                     echo "deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu precise main";
#DISABLE#                 } | sudo tee -a /etc/apt/sources.list > /dev/null
#DISABLE#             fi
#DISABLE#             sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886
#DISABLE#             sudo apt-get -y update
#DISABLE#             echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections
#DISABLE#             sudo apt-get -y install oracle-java8-installer
#DISABLE#             sudo apt-get -y clean
#DISABLE#         fi
#DISABLE#         source /usr/local/etc/a2cloudrc
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: Java is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     updateADTPro=
#DISABLE#     # check if update needed
#DISABLE#     if [ -f /usr/local/adtpro/lib/ADTPro-* ]; then
#DISABLE#         if [[ $(ls -1 /usr/local/adtpro/lib/ADTPro-*.jar | cut -f 6 -d '/') != "ADTPro-$adtProVersion.jar" ]]; then
#DISABLE#             echo
#DISABLE#             echo "ADTPro server should be updated. If you have made any customizations"
#DISABLE#             echo "  to any of the files in /usr/local/adtpro, other than the 'disks' folder,"
#DISABLE#             echo "  they will be lost. If you don't know what this means, then you don't"
#DISABLE#             echo -n "  need to worry. Update now? "
#DISABLE#             read
#DISABLE#             if [[ ${REPLY:0:1} == "Y" || ${REPLY:0:1} == "y" ]]; then
#DISABLE#                 updateADTPro=1
#DISABLE#                 echo "A2CLOUD: removing old version of ADTPro server..."
#DISABLE#                 sudo pkill -f [A]DTPro
#DISABLE#                 sudo rm /usr/local/adtpro/disks/ADTPRO*.DSK &> /dev/null
#DISABLE#                 sudo rm /usr/local/adtpro/disks/ADTPRO*.PO &> /dev/null
#DISABLE#                 sudo rm /usr/local/adtpro/disks/VDRIVE*.DSK &> /dev/null
#DISABLE#                 sudo rm -r /tmp/a2cloud-install/disks &> /dev/null
#DISABLE#                 sudo mv /usr/local/adtpro/disks /tmp/a2cloud-install
#DISABLE#                 sudo rm -r /usr/local/adtpro/ac.bat \
#DISABLE#                            /usr/local/adtpro/ac.sh \
#DISABLE#                            /usr/local/adtpro/adtpro.bat \
#DISABLE#                            /usr/local/adtpro/adtpro.cmd \
#DISABLE#                            /usr/local/adtpro/ADTPro.html \
#DISABLE#                            /usr/local/adtpro/adtpro.sh \
#DISABLE#                            /usr/local/adtpro/lib \
#DISABLE#                            /usr/local/adtpro/LICENSE \
#DISABLE#                            /usr/local/adtpro/README \
#DISABLE#                            &> /dev/null
#DISABLE#             fi
#DISABLE#         else
#DISABLE#             echo "A2CLOUD: ADTPro server does not need updating."
#DISABLE#         fi
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if [[ ! -f /usr/local/adtpro/adtpro.sh || ! -f /usr/local/adtpro/ADTPro.html ]]; then
#DISABLE#         echo "A2CLOUD: installing ADTPro server..."
#DISABLE#         sudo pkill -f [A]DTPro
#DISABLE#         wget -qO /tmp/a2cloud-install/adtpro.tar.gz downloads.sourceforge.net/project/adtpro/adtpro/ADTPro-$adtProVersion/ADTPro-$adtProVersion.tar.gz
#DISABLE#         sudo mkdir -p /usr/local/adtpro
#DISABLE#         sudo tar --strip-components=1 -C /usr/local/adtpro -zxf /tmp/a2cloud-install/adtpro.tar.gz
#DISABLE#         sudo chmod -R ugo+w /usr/local/adtpro
#DISABLE#         sudo ln -s /usr/local/adtpro/lib/ADTPro*jar /usr/local/adtpro/lib/ADTPro.jar
#DISABLE#         sudo ln -s /usr/local/adtpro/lib/AppleCommander/AppleCommander*ac.jar /usr/local/adtpro/lib/AppleCommander/AppleCommander-ac.jar
#DISABLE#         echo "sudo /usr/local/adtpro/adtpro.sh \$@" | sudo tee /usr/local/bin/adtpro.sh > /dev/null
#DISABLE#         sudo chmod ugo+x /usr/local/bin/adtpro.sh
#DISABLE#         sudo usermod -a -G uucp $USER
#DISABLE#         sudo usermod -a -G uucp root
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: ADTPro server is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if [[ ! -f /usr/local/adtpro/lib/AppleCommander/AppleCommander-1.3.5.13id-ac.jar ]]; then
#DISABLE#         echo "A2CLOUD: Installing AppleCommander-1.3.5.13id..."
#DISABLE#         sudo mkdir -p /usr/local/adtpro/lib/AppleCommander
#DISABLE#         wget -qO /usr/local/adtpro/lib/AppleCommander/AppleCommander-1.3.5.13id-ac.jar http://downloads.sourceforge.net/project/applecommander/AppleCommander%20-%20Interim/testcase/AppleCommander-1.3.5.13id-ac.jar
#DISABLE#         rm /usr/local/adtpro/lib/AppleCommander/AppleCommander-ac.jar &> /dev/null
#DISABLE#         ln -s AppleCommander-1.3.5.13id-ac.jar /usr/local/adtpro/lib/AppleCommander/AppleCommander-ac.jar
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: AppleCommander-1.3.5.13id is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Setting up customized adtpro.sh..."
#DISABLE#     wget -qO /usr/local/adtpro/adtpro.sh ivanx.com/a2cloud/setup/adtpro.sh.txt
#DISABLE#     sudo chmod ugo+rwx /usr/local/adtpro/adtpro.sh
#DISABLE# 
#DISABLE#     if [[ $updateADTPro ]]; then
#DISABLE#         echo "A2CLOUD: Replacing disks folder..."
#DISABLE#         sudo mv /tmp/a2cloud-install/disks/* /usr/local/adtpro/disks
#DISABLE#         sudo rmdir /tmp/a2cloud-install/disks
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if [[ ! -f /usr/lib/jni/librxtxSerial.so ]]; then
#DISABLE#         echo "A2CLOUD: Installing serial port libraries..."
#DISABLE#         sudo apt-get -y install librxtx-java
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: Serial port libraries are already installed."
#DISABLE#     fi
#DISABLE#     [[ ! -f /usr/lib/RXTXcomm.jar ]] && sudo ln -s /usr/share/java/RXTXcomm.jar /usr/lib &> /dev/null
#DISABLE#     [[ ! -d /usr/local/adtpro/lib/rxtx/rxtx-2.2pre2-local/arm ]] && ln -s /usr/lib/jni /usr/local/adtpro/lib/rxtx/rxtx-2.2pre2-local/arm &> /dev/null
#DISABLE# 
#DISABLE#     if ! command -v xvfb-run >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing xvfb for headless operation..."
#DISABLE#         sudo apt-get -y install xvfb
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: xvfb is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if [[ -f /usr/local/sbin/afpd ]]; then # A2SERVER/netatalk installed
#DISABLE#         if [[ ! -d /media/A2SHARED/ADTDISKS || ! $(grep ADTDISKS /usr/local/etc/netatalk/AppleVolumes.default) ]]; then
#DISABLE#             echo "A2CLOUD: Setting up /usr/local/adtpro/disks for Apple file sharing..."
#DISABLE#             if [[ ! -d /media/A2SHARED/ADTDISKS ]]; then
#DISABLE#                 ln -s /usr/local/adtpro/disks /media/A2SHARED/ADTDISKS 2> /dev/null
#DISABLE#             fi
#DISABLE#             if [[ ! $(grep ADTDISKS /usr/local/etc/netatalk/AppleVolumes.default) ]]; then
#DISABLE#                 sudo sed -i 's@^# End of File@/media/A2SHARED/ADTDISKS ADTDISKS ea:ad\n\n# End of File@' /usr/local/etc/netatalk/AppleVolumes.default
#DISABLE#             fi
#DISABLE#             sudo /etc/init.d/netatalk restart
#DISABLE#         else
#DISABLE#             echo "A2CLOUD: /usr/local/adtpro/disks is already set up for Apple file sharing."
#DISABLE#         fi
#DISABLE# 
#DISABLE#         if { grep -q A2SHARED /etc/samba/smb.conf 2> /dev/null; }; then
#DISABLE#             # SMB already enabled by A2SERVER
#DISABLE#             if { grep -q ADTDISKS /etc/samba/smb.conf 2>/dev/null; }; then
#DISABLE#                 echo "A2CLOUD: /usr/local/adtpro/disks is already set up for Windows file sharing."
#DISABLE#             else
#DISABLE#                 echo "A2CLOUD: Setting up /usr/local/adtpro/disks for Windows file sharing..."
#DISABLE#                 echo "[ADTDISKS]" | sudo tee -a /etc/samba/smb.conf > /dev/null
#DISABLE#                 echo "    path = /media/A2SHARED/ADTDISKS" | sudo tee -a /etc/samba/smb.conf > /dev/null
#DISABLE#                 echo "    browsable = yes" | sudo tee -a /etc/samba/smb.conf > /dev/null
#DISABLE#                 echo "    guest ok = yes" | sudo tee -a /etc/samba/smb.conf > /dev/null
#DISABLE#                 echo "    read only = no" | sudo tee -a /etc/samba/smb.conf > /dev/null
#DISABLE#                 echo "    create mask = 0666" | sudo tee -a /etc/samba/smb.conf > /dev/null
#DISABLE#                 echo "    force user = $(whoami)" | sudo tee -a /etc/samba/smb.conf > /dev/null
#DISABLE#             fi
#DISABLE#         else
#DISABLE#             echo "A2CLOUD: Windows file sharing not in use."
#DISABLE#         fi
#DISABLE#     fi
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Setting up adtpro-start command..."
#DISABLE#     sudo wget -qO /usr/local/bin/adtpro-start ${scriptURL}setup/adtpro-start.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/adtpro-start
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Setting up vsd1/vsd2 commands..."
#DISABLE#     sudo wget -qO /usr/local/bin/vsd ${scriptURL}setup/vsd.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/vsd
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Setting up acmd command..."
#DISABLE#     sudo wget -qO /usr/local/bin/acmd ${scriptURL}setup/acmd.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/acmd
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Setting up mkpo command..."
#DISABLE#     sudo wget -qO /usr/local/bin/mkpo ${scriptURL}setup/mkpo.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/mkpo
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Setting up dos2pro command..."
#DISABLE#     sudo wget -qO /usr/local/bin/dos2pro ${scriptURL}setup/dos2pro.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/dos2pro
#DISABLE# 
#DISABLE# fi
#DISABLE# 
#DISABLE# if command -v X >/dev/null; then
#DISABLE#     if dpkg-query -l xrdp; then
#DISABLE#         echo "A2CLOUD: Installing xrdp/tightvncserver..."
#DISABLE#         sudo apt-get -y install xrdp
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: xrdp/tightvncserver is already installed."
#DISABLE#     fi
#DISABLE# else
#DISABLE#     echo "A2CLOUD: X11 not found; not installing xrdp/tightvncserver."
#DISABLE# fi
#DISABLE# 
#DISABLE# if [[ $setupSerialPortLogin ]]; then
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Setting GPIO serial login to 4800 bps, and disabling..."
#DISABLE#     # set console port login to 4800 bps (using RPi console cable) and comment it out
#DISABLE#     sudo sed -i 's/^\(T.*\)ttyAMA0 .* /#\1ttyAMA0 4800 /' /etc/inittab
#DISABLE#     sudo sed -i 's/ttyAMA0,[0-9]*/ttyAMA0,4800/g' /boot/cmdline.txt 2> /dev/null
#DISABLE# 
#DISABLE#     if ! command -v screen >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing Screen for multiple terminals..."
#DISABLE#         sudo apt-get -y install screen
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: Screen is already installed."
#DISABLE#     fi
#DISABLE#     echo "A2CLOUD: Disabling Screen welcome message..."
#DISABLE#     sudo sed -i 's/^#startup_message/startup_message/' /etc/screenrc
#DISABLE# 
#DISABLE#     # use 8-bit (non-Unicode) character set for proper emulation in Apple II term programs
#DISABLE#     IFS='' defaultLang=$(grep ^LANG= /etc/default/locale | cut -f 2 -d '=')
#DISABLE#     langLatin1=${defaultLang%%.*}
#DISABLE#     if [[ ! $(grep "^$langLatin1.ISO" /usr/share/i18n/SUPPORTED) ]]; then
#DISABLE#         langLatin1="en_US"
#DISABLE#     fi
#DISABLE#     if [[ $(cat /usr/local/etc/a2cloud-lang 2> /dev/null) != $langLatin1 ]]; then
#DISABLE#         echo "A2CLOUD: Setting serial port login to use 8-bit character set..."
#DISABLE#         if [[ ! $(grep "^$langLatin1.ISO" /etc/locale.gen) ]]; then
#DISABLE#             echo "A2CLOUD: Generating locales..."
#DISABLE#             locs=$(IFS='' grep "^[^#]" /etc/locale.gen | while read -r thisLoc; do echo -n "$thisLoc, " ; done)
#DISABLE#             locISO=$(grep "$langLatin1.ISO" /usr/share/i18n/SUPPORTED | sort | head -1)
#DISABLE#             echo "locales locales/locales_to_be_generated multiselect $locs$locISO" | sudo debconf-set-selections
#DISABLE#             sudo rm /etc/locale.gen &> /dev/null
#DISABLE#             sudo dpkg-reconfigure -f noninteractive locales
#DISABLE#         else
#DISABLE#             echo "A2CLOUD: Locales have already been generated."
#DISABLE#         fi
#DISABLE#         # set LANG to ISO-8859 (8-bit) character set on TTY login
#DISABLE#         echo "${locISO%% *}" | sudo tee /usr/local/etc/a2cloud-lang > /dev/null
#DISABLE#         source /usr/local/etc/a2cloudrc
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: Serial port login is already using 8-bit character set."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Setting up baud command..."
#DISABLE#     sudo wget -qO /usr/local/bin/baud ${scriptURL}setup/baud.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/baud
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Setting up term command..."
#DISABLE#     sudo wget -qO /usr/local/bin/term ${scriptURL}setup/term.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/term
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Setting up usbgetty command..."
#DISABLE#     sudo wget -qO /usr/local/sbin/usbgetty ${scriptURL}setup/usbgetty.txt
#DISABLE#     sudo chmod ugo+x /usr/local/sbin/usbgetty
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Removing ttyUSB0 shell login..."
#DISABLE#     sudo sed -i "s/^\([^#].*ttyUSB0.*\)$//" /etc/inittab
#DISABLE# 
#DISABLE#     if [[ ! $(grep -e '-scanttyUSB' /etc/inittab) ]]; then
#DISABLE#         echo "A2CLOUD: Adding USB port shell login at 4800 bps..."
#DISABLE#         echo -e "\n\n#for USB-to-serial adapter\nT1:23:respawn:/usr/local/sbin/usbgetty -h -L -scanttyUSB 4800 vt100" | sudo tee -a /etc/inittab > /dev/null
#DISABLE#         sudo init q
#DISABLE#         sudo pkill -f "[g]etty.*ttyUSB"
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: USB port shell login already added."
#DISABLE#     fi
#DISABLE# fi
#DISABLE# 
#DISABLE# 
#DISABLE# echo "A2CLOUD: Setting up USB port serial adapter handler..."
#DISABLE# sudo wget -qO /usr/local/sbin/ttyusbhandler ${scriptURL}setup/ttyusbhandler.txt
#DISABLE# sudo chmod ugo+x /usr/local/sbin/ttyusbhandler
#DISABLE# 
#DISABLE# if [[ ! -f /etc/udev/rules.d/50-usb.rules ]]; then
#DISABLE#     echo "A2CLOUD: Creating device rules for USB ports..."
#DISABLE#     udevLines=
#DISABLE#     if [[ $isRpi ]]; then
#DISABLE#         # assign ttyUSBupper, or ttyUSBupper_hubXX, for shell usb-to-serial adapter
#DISABLE#         # assign ttyUSBlower, or ttyUSBlower_hubXX, for ADTPro usb-to-serial adapter
#DISABLE#         # (A/A+ direct attach is always ttyUSBlower;
#DISABLE#         #   hub attached to A/A+ will be ttyUSBupper on port 2, and ttyUSBlower on port 3)
#DISABLE#         udevLines+='KERNEL=="ttyUSB*", KERNELS=="1-1:1.0", SYMLINK+="ttyUSBlower", RUN+="/usr/local/sbin/ttyusbhandler add ttyUSBlower"\n'
#DISABLE#         udevLines+='ACTION=="remove",  ENV{DEVPATH}=="*1-1:1.0*", RUN+="/usr/local/sbin/ttyusbhandler remove ttyUSBlower"\n'
#DISABLE#         udevLines+='KERNEL=="ttyUSB*", KERNELS=="1-1.2:1.0", SYMLINK+="ttyUSBupper", RUN+="/usr/local/sbin/ttyusbhandler add ttyUSBupper"\n'
#DISABLE#         udevLines+='ACTION=="remove",  ENV{DEVPATH}=="*1-1.2:1.0*", RUN+="/usr/local/sbin/ttyusbhandler remove ttyUSBupper"\n'
#DISABLE#         udevLines+='KERNEL=="ttyUSB*", KERNELS=="1-1.3:1.0", SYMLINK+="ttyUSBlower", RUN+="/usr/local/sbin/ttyusbhandler add ttyUSBlower"\n'
#DISABLE#         udevLines+='ACTION=="remove",  ENV{DEVPATH}=="*1-1.3:1.0*", RUN+="/usr/local/sbin/ttyusbhandler remove ttyUSBlower"\n'
#DISABLE#         for i in {1..25}; do
#DISABLE#             ii=$(printf %02d $i)
#DISABLE#             udevLines+='KERNEL=="ttyUSB*", KERNELS=="1-1.2.'$i':1.0", SYMLINK+="ttyUSBupper_hub'$ii'", RUN+="/usr/local/sbin/ttyusbhandler add ttyUSBupper_hub'$ii'"\n'
#DISABLE#             udevLines+='ACTION=="remove",  ENV{DEVPATH}=="*1-1.2.'$i':1.0*", RUN+="/usr/local/sbin/ttyusbhandler remove ttyUSBupper_hub'$ii'"\n'
#DISABLE#             udevLines+='KERNEL=="ttyUSB*", KERNELS=="1-1.3.'$i':1.0", SYMLINK+="ttyUSBlower_hub'$ii'", RUN+="/usr/local/sbin/ttyusbhandler add ttyUSBlower_hub'$ii'"\n'
#DISABLE#             udevLines+='ACTION=="remove",  ENV{DEVPATH}=="*1-1.3.'$i':1.0*", RUN+="/usr/local/sbin/ttyusbhandler remove ttyUSBlower_hub'$ii'"\n'
#DISABLE#         done
#DISABLE#     else
#DISABLE#         # on non-Pi installations, assign ttyUSBupper to ttyUSB0 and ttyUSBlower to ttyUSB1
#DISABLE#         udevLines+='KERNEL=="ttyUSB0", SYMLINK+="ttyUSBupper", RUN+="/usr/local/sbin/ttyusbhandler add ttyUSBupper"\n'
#DISABLE#         udevLines+='ACTION=="remove",  ENV{DEVPATH}=="*ttyUSB0*", RUN+="/usr/local/sbin/ttyusbhandler remove ttyUSBupper"\n'
#DISABLE#         udevLines+='KERNEL=="ttyUSB1", SYMLINK+="ttyUSBlower", RUN+="/usr/local/sbin/ttyusbhandler add ttyUSBlower"\n'
#DISABLE#         udevLines+='ACTION=="remove",  ENV{DEVPATH}=="*ttyUSB1*", RUN+="/usr/local/sbin/ttyusbhandler remove ttyUSBlower"\n'
#DISABLE#     fi
#DISABLE#     echo -e "$udevLines" | sudo tee /etc/udev/rules.d/50-usb.rules > /dev/null
#DISABLE# else
#DISABLE#     echo "A2CLOUD: Device rules for USB ports already exist."
#DISABLE# fi
#DISABLE# 
#DISABLE# 
#DISABLE# if [[ $installCommTools ]]; then
#DISABLE# 
#DISABLE#     if ! command -v curl >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing curl..."
#DISABLE#         sudo apt-get -y install curl
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: curl is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if ! command -v sz >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing rzsz for X/Y/Zmodem transfers..."
#DISABLE#         sudo apt-get -y install lrzsz
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: rzsz is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if ! command -v ftp >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing ftp..."
#DISABLE#         sudo apt-get -y install ftp
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: ftp is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if ! command -v cftp >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing cftp..."
#DISABLE#         cd /tmp/a2cloud-install
#DISABLE#         if [[ $downloadBinaries ]]; then
#DISABLE#             if [[ $isRpi ]]; then
#DISABLE#                 wget -qO- http://appleii.ivanx.com/a2cloud/files/cftp-rpi.tgz | sudo tar Pzx
#DISABLE#             elif [[ $isDebian ]]; then
#DISABLE#                 wget -qO- http://appleii.ivanx.com/a2cloud/files/cftp-debian7_x86.tgz | sudo tar Pzx
#DISABLE#             fi
#DISABLE#         fi
#DISABLE#         if ! command -v cftp >/dev/null; then
#DISABLE#             sudo apt-get -y install build-essential
#DISABLE#             sudo apt-get -y install ncurses-dev
#DISABLE#             sudo apt-get -y clean
#DISABLE#             rm -rf /tmp/a2cloud-install/cftp* &> /dev/null
#DISABLE#             mkdir -p /tmp/a2cloud-install/cftp
#DISABLE#             cd /tmp/a2cloud-install/cftp
#DISABLE#             wget -q -O cftp.tgz http://nih.at/cftp/cftp-0.12.tar.gz
#DISABLE#             tar zxf cftp.tgz
#DISABLE#             cd cftp-0.12
#DISABLE#             ./configure
#DISABLE#             make
#DISABLE#             sudo make install
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             rm -rf cftp
#DISABLE#         fi
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: cftp is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if ! command -v lynx >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing lynx..."
#DISABLE#         sudo apt-get -y install lynx
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: lynx is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if ! command -v links >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing links..."
#DISABLE#         sudo apt-get -y --force-yes install links
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: links is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     sudo wget -qO /usr/local/bin/a2news ${scriptURL}setup/a2news.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/a2news
#DISABLE#     if ! command -v tin >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing a2news/tin..."
#DISABLE#         sudo apt-get -y install tin
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: a2news/tin is already installed."
#DISABLE#     fi
#DISABLE#     # have exim4 use IPv4 only to prevent log errors (IPv6 is off by default in Raspbian)
#DISABLE#     if [[ $(grep ' ; ::1' /etc/exim4/update-exim4.conf.conf) ]]; then
#DISABLE#         echo "A2CLOUD: Setting exim4 to use only IPv4 to prevent startup error messages..."
#DISABLE#         sudo sed -i 's/ ; ::1//' /etc/exim4/update-exim4.conf.conf
#DISABLE#         sudo update-exim4.conf
#DISABLE#         sudo rm /var/log/exim4/mainlog /var/log/exim4/paniclog &> /dev/null
#DISABLE#     fi
#DISABLE#     # restore exim4 log directory if occupied by a file put there by earlier A2CLOUD versions
#DISABLE#     if [[ -f /var/log/exim4 ]]; then
#DISABLE#         echo "A2CLOUD: Restoring exim4 log directory..."
#DISABLE#         sudo rm /var/log/exim4
#DISABLE#         sudo mkdir /var/log/exim4
#DISABLE#         sudo chown Debian-exim:adm /var/log/exim4
#DISABLE#         sudo chmod 2750 /var/log/exim4
#DISABLE#     fi
#DISABLE# 
#DISABLE#     sudo wget -qO /usr/local/bin/a2chat ${scriptURL}setup/a2chat.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/a2chat
#DISABLE#     if ! command -v irssi >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing a2chat/irssi..."
#DISABLE#         sudo apt-get -y install irssi
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: a2chat/irssi is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if ! command -v telnet >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing telnet..."
#DISABLE#         sudo apt-get -y install telnet
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: telnet is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     # Do we need to check for the readline module here as well?
#DISABLE#     #if [[ ( ! -f /usr/bin/ttytter && ! -f /usr/local/bin/ttytter ) || ! -f "/usr/local/share/perl/5.14.2/Term/ReadLine/TTYtter.pm" ]]; then
#DISABLE#     if ! command -v ttyter >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing TTYtter..."
#DISABLE#         sudo wget -qO /usr/local/bin/ttytter http://www.floodgap.com/software/ttytter/dist2/2.1.00.txt
#DISABLE#         sudo chmod ugo+x /usr/local/bin/ttytter
#DISABLE#         perlVersion=$(perl -e 'print $^V' | cut -c 2-)
#DISABLE#         if [[ ! -f "/usr/local/share/perl/$perlVersion/Term/ReadLine/TTYtter.pm" ]]; then
#DISABLE#             echo "A2CLOUD: Installing TTYtter readline module..."
#DISABLE#             if [[ $downloadBinaries && $perlVersion == "5.14.2" ]]; then
#DISABLE#                 if [[ $isRpi ]]; then
#DISABLE#                     wget -qO- http://appleii.ivanx.com/a2cloud/files/ttytter_readline-rpi.tgz | sudo tar Pzx
#DISABLE#                 elif [[ $isDebian ]]; then
#DISABLE#                     wget -qO- http://appleii.ivanx.com/a2cloud/files/ttytter_readline-debian7_x86.tgz | sudo tar Pzx
#DISABLE#                 fi
#DISABLE#             fi
#DISABLE#             if [[ ! -f "/usr/local/share/perl/$perlVersion/Term/ReadLine/TTYtter.pm" ]]; then
#DISABLE#                 if [[ ! -f "/usr/local/lib/perl/$perlVersion/Term/ReadKey.pm" ]]; then
#DISABLE#                     cd /tmp/a2cloud-install
#DISABLE#                     wget -qO TermReadKey-2.31.tar.gz http://www.cpan.org/authors/id/J/JS/JSTOWE/TermReadKey-2.31.tar.gz
#DISABLE#                     tar zxf TermReadKey-2.31.tar.gz
#DISABLE#                     cd TermReadKey-2.31
#DISABLE#                     perl Makefile.PL &> /dev/null
#DISABLE#                     make &> /dev/null
#DISABLE#                     sudo make install &> /dev/null
#DISABLE#                     cd /tmp/a2cloud-install
#DISABLE#                     rm -rf TermReadKey-2.31
#DISABLE#                 fi
#DISABLE#                 cd /tmp/a2cloud-install
#DISABLE#                 wget -qO Term-ReadLine-TTYtter-1.4.tar.gz http://www.cpan.org/authors/id/C/CK/CKAISER/Term-ReadLine-TTYtter-1.4.tar.gz
#DISABLE#                 tar zxf Term-ReadLine-TTYtter-1.4.tar.gz
#DISABLE#                 cd Term-ReadLine-TTYtter-1.4
#DISABLE#                 perl Makefile.PL &> /dev/null
#DISABLE#                 make &> /dev/null
#DISABLE#                 sudo make install &> /dev/null
#DISABLE#                 cd /tmp/a2cloud-install
#DISABLE#                 rm -rf Term-ReadLine-TTYtter-1.4
#DISABLE#             fi
#DISABLE#         else
#DISABLE#             echo "A2CLOUD: TTYtter readline module is already installed."
#DISABLE#         fi
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: TTYtter is already installed."
#DISABLE#     fi
#DISABLE# fi
#DISABLE# 
#DISABLE# if [[ $installA2Pi ]]; then
#DISABLE#     if dpkg-query -l a2pi &>/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing Apple II Pi..."
#DISABLE#         cd /tmp/a2cloud-install
#DISABLE#         if ! grep 'schmenk.is-a-geek.com' /etc/apt/sources.list; then
#DISABLE#             echo "deb http://schmenk.is-a-geek.com/raspbian wheezy contrib" | sudo tee -a /etc/apt/sources.list > /dev/null
#DISABLE#             sudo apt-get -y update > /dev/null
#DISABLE#         fi
#DISABLE#         sudo apt-get -y --force-yes install a2pi
#DISABLE#         sudo apt-get -y clean
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: Apple II Pi is already installed."
#DISABLE#     fi
#DISABLE#     if [[ ! $noA2PiExtras ]]; then
#DISABLE#         if [[ ! $(dpkg -l | grep libpcap0.8-dev) ]]; then
#DISABLE#             sudo apt-get -y install libpcap0.8-dev
#DISABLE#             sudo apt-get -y clean
#DISABLE#         fi
#DISABLE#         if ! command -v gsport >/dev/null; then
#DISABLE#             # echo "A2CLOUD: Updating package repositories to include Apple II Pi..."
#DISABLE#             # sudo apt-get -y update > /dev/null
#DISABLE#             echo "A2CLOUD: Installing Apple II Pi extras (GSport)..."
#DISABLE#             sudo apt-get -y --force-yes install apple2user
#DISABLE#             sudo apt-get -y clean
#DISABLE#         else
#DISABLE#             echo "A2CLOUD: Apple II Pi extras (GSport) are already installed."
#DISABLE#         fi
#DISABLE#     fi
#DISABLE#     sudo sed -i 's/( $SSH_CLIENT || $REMOTEHOST )/( $(tty | grep ttyUSB) || $(tty | grep ttyAMA) || $SSH_CLIENT || $REMOTEHOST )/' /usr/bin/gsport
#DISABLE#     if [[ $slot6 ]]; then
#DISABLE#         echo "A2CLOUD: Putting blank disks in GSport slot 6..."
#DISABLE#         sudo sed -i 's@^s6d1.*$@s6d1 = /usr/share/gsport/disks/slot6drive1.po@' /usr/share/gsport/config.txt
#DISABLE#         sudo sed -i 's@^s6d2.*$@s6d2 = /usr/share/gsport/disks/slot6drive2.po@' /usr/share/gsport/config.txt
#DISABLE#         sudo sed -i 's@^s6d1.*$@s6d1 = /usr/share/gsport/disks/slot6drive1.po@' /home/apple2/config.txt
#DISABLE#         sudo sed -i 's@^s6d2.*$@s6d2 = /usr/share/gsport/disks/slot6drive2.po@' /home/apple2/config.txt
#DISABLE#         if [[ ! -f /usr/share/gsport/disks/slot6drive1.po || ! -f /usr/share/gsport/disks/slot6drive2.po ]]; then
#DISABLE#             wget -qO- ivanx.com/a2cloud/files/slot6-gsport-rpi.tgz | sudo tar Pzx 2> /dev/null
#DISABLE#         fi
#DISABLE#     fi
#DISABLE# 
#DISABLE#     # set AppleTalk to turbo
#DISABLE#     if ! grep -q 'g_appletalk_turbo' /usr/share/gsport/config.txt; then
#DISABLE#         if grep -q 'bram1[00]' /usr/share/gsport/config.txt; then
#DISABLE#             sudo sed -i 's/^\(bram1\[00\]\)/g_appletalk_turbo = 1\n\n\1/' /usr/share/gsport/config.txt
#DISABLE#         else
#DISABLE#             echo -e '\ng_appletalk_turbo = 1' | sudo tee -a /usr/share/gsport/config.txt > /dev/null
#DISABLE#         fi
#DISABLE#     fi
#DISABLE#     sudo sed -i 's/^g_appletalk_turbo = 0/g_appletalk_turbo = 1/' /usr/share/gsport/config.txt
#DISABLE# 
#DISABLE#     # enable Uthernet
#DISABLE#     if ! grep -q 'g_ethernet[^_]' /usr/share/gsport/config.txt; then
#DISABLE#         if grep -q 'bram1[00]' /usr/share/gsport/config.txt; then
#DISABLE#             sudo sed -i 's/^\(bram1\[00\]\)/g_ethernet = 1\n\n\1/' /usr/share/gsport/config.txt
#DISABLE#         else
#DISABLE#             echo -e '\ng_ethernet = 1' | sudo tee -a /usr/share/gsport/config.txt > /dev/null
#DISABLE#         fi
#DISABLE#     fi
#DISABLE#     sudo sed -i 's/^g_ethernet = 0/g_ethernet = 1/' /usr/share/gsport/config.txt
#DISABLE# 
#DISABLE# fi
#DISABLE# 
#DISABLE# if [[ $installEmulators ]]; then
#DISABLE# 
#DISABLE#     # KEGS
#DISABLE#     if ! command -v xkegs >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing KEGS..."
#DISABLE#         cd /tmp/a2cloud-install
#DISABLE#         if [[ $downloadBinaries ]]; then
#DISABLE#             if [[ $isRpi ]]; then
#DISABLE#                 wget -qO- http://appleii.ivanx.com/a2cloud/files/kegs-rpi.tgz | sudo tar Pzx 2> /dev/null
#DISABLE#             elif [[ $isDebian ]]; then
#DISABLE#                 wget -qO- http://appleii.ivanx.com/a2cloud/files/kegs-debian7_x86.tgz | sudo tar Pzx
#DISABLE#             fi
#DISABLE#         fi
#DISABLE#         if ! command -v xkegs >/dev/null; then
#DISABLE#             echo "A2CLOUD: Building KEGS from source..."
#DISABLE#             sudo apt-get -y install build-essential &> /dev/null
#DISABLE#             sudo apt-get -y install libx11-dev libxext-dev xfonts-base &> /dev/null
#DISABLE#             sudo apt-get -y clean
#DISABLE#             mkdir -p /tmp/a2cloud-install/kegs
#DISABLE#             cd /tmp/a2cloud-install/kegs
#DISABLE#             wget -q -O kegs.tgz kegs.sourceforge.net/kegs.0.91.tar.gz
#DISABLE#             tar zxf kegs.tgz
#DISABLE#             cd kegs.0.91/src
#DISABLE#             rm vars 2> /dev/null
#DISABLE#             ln -s vars_x86linux vars
#DISABLE#             if [[ $isRpi ]]; then
#DISABLE#                 sudo sed -i 's/march=pentium/march=armv6k/' vars_x86linux
#DISABLE#             fi
#DISABLE#             make &> /dev/null
#DISABLE#             gcc -o ../to_pro to_pro.c &> /dev/null
#DISABLE#             gcc -o ../partls partls.c &> /dev/null
#DISABLE#             sudo cp -P ../xkegs ../to_pro ../partls /usr/local/bin
#DISABLE#             sudo cp ../config.kegs /usr/local/lib
#DISABLE#             sudo chmod ugo+w /usr/local/lib/config.kegs
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             rm -rf kegs
#DISABLE#         fi
#DISABLE# 
#DISABLE#         if [[ $slot6 ]]; then
#DISABLE#             echo "A2CLOUD: Putting blank disks in KEGS slot 6..."
#DISABLE#             sudo sed -i 's@^s6d1.*$@s6d1 = /usr/local/share/gsdisks/slot6drive1.po@' /usr/local/lib/config.kegs
#DISABLE#             sudo sed -i 's@^s6d2.*$@s6d2 = /usr/local/share/gsdisks/slot6drive2.po@' /usr/local/lib/config.kegs
#DISABLE#             if [[ ! -f /usr/local/share/gsdisks/slot6drive1.po || ! -f /usr/local/share/gsdisks/slot6drive2.po ]]; then
#DISABLE#                 wget -qO- http://appleii.ivanx.com/a2cloud/files/slot6.tgz | sudo tar Pzx 2> /dev/null
#DISABLE#             fi
#DISABLE#         fi
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: KEGS is already installed."
#DISABLE#     fi
#DISABLE#     echo "A2CLOUD: Updating KEGS launch and setup files..."
#DISABLE# 
#DISABLE#     sudo addgroup kegs &> /dev/null
#DISABLE#     sudo chgrp kegs /usr/local/bin/xkegs
#DISABLE#     sudo chmod u+s /usr/local/bin/xkegs
#DISABLE# 
#DISABLE#     sudo wget -qO /usr/local/bin/kegs ${scriptURL}setup/kegs.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/kegs
#DISABLE#     sudo wget -qO /usr/local/bin/kegs-setup ${scriptURL}setup/kegs-setup-shell.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/kegs-setup
#DISABLE# 
#DISABLE# 
#DISABLE#     # GSport, if non-RPi
#DISABLE#     if [[ ! $isRpi && ! -f /usr/local/bin/gsport ]]; then
#DISABLE#         echo "A2CLOUD: Installing GSport..."
#DISABLE#         cd /tmp/a2cloud-install
#DISABLE#         if [[ $downloadBinaries ]]; then
#DISABLE#             sudo apt-get -y install libpcap0.8-dev &> /dev/null
#DISABLE#             sudo apt-get -y clean
#DISABLE#             if [[ $isDebian ]]; then
#DISABLE#                 wget -qO- http://appleii.ivanx.com/a2cloud/files/gsport-debian7_x86.tgz | sudo tar Pzx 2> /dev/null
#DISABLE#             fi
#DISABLE#         fi
#DISABLE#         if ! command -v gsport >/dev/null; then
#DISABLE#             echo "A2CLOUD: Building GSport from source..."
#DISABLE#             sudo apt-get -y install build-essential &> /dev/null
#DISABLE#             sudo apt-get -y install libx11-dev libxext-dev xfonts-base libpcap0.8-dev &> /dev/null
#DISABLE#             sudo apt-get -y clean > /dev/null
#DISABLE#             mkdir -p /tmp/a2cloud-install/gsport
#DISABLE#             cd /tmp/a2cloud-install/gsport
#DISABLE#             wget -q -O gsport.tgz http://downloads.sourceforge.net/project/gsport/GSport-0.31/gsport_0.31.tar.gz
#DISABLE#             tar zxf gsport.tgz
#DISABLE#             cd gsport*/src
#DISABLE#             rm vars 2> /dev/null
#DISABLE#             ln -s vars_x86linux vars
#DISABLE#             make &> /dev/null
#DISABLE#             gcc -o ../to_pro to_pro.c &> /dev/null
#DISABLE#             gcc -o ../partls partls.c &> /dev/null
#DISABLE#             sudo cp -P ../gsportx ../to_pro ../partls /usr/local/bin
#DISABLE#             sudo cp ../config.txt /usr/local/lib
#DISABLE#             sudo chmod ugo+w /usr/local/lib/config.txt
#DISABLE#             make clean &> /dev/null
#DISABLE#             rm vars
#DISABLE#             cp vars_fbrpilinux vars
#DISABLE#             sed -i 's/-march=armv6/-march=i686/' vars
#DISABLE#             make &> /dev/null
#DISABLE#             sudo cp -P ../gsportfb /usr/local/bin
#DISABLE#             cd /usr/local/lib
#DISABLE#             sudo ln -s config.txt gsport_config.txt 2> /dev/null
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             rm -rf gsport
#DISABLE#         fi
#DISABLE# 
#DISABLE#         if [[ $slot6 ]]; then
#DISABLE#             echo "A2CLOUD: Putting blank disks in GSport slot 6..."
#DISABLE#             sudo sed -i 's@^s6d1.*$@s6d1 = /usr/local/share/gsdisks/slot6drive1.po@' /usr/local/lib/config.txt
#DISABLE#             sudo sed -i 's@^s6d2.*$@s6d2 = /usr/local/share/gsdisks/slot6drive2.po@' /usr/local/lib/config.txt
#DISABLE#             if [[ ! -f /usr/local/share/gsdisks/slot6drive1.po || ! -f /usr/local/share/gsdisks/slot6drive2.po ]]; then
#DISABLE#                 wget -qO- http://appleii.ivanx.com/a2cloud/files/slot6.tgz | sudo tar Pzx 2> /dev/null
#DISABLE#             fi
#DISABLE#         fi
#DISABLE# 
#DISABLE#         # enable AppleTalk
#DISABLE#         if ! grep -q 'g_appletalk_turbo' /usr/local/lib/config.txt; then
#DISABLE#             if grep -q 'bram1[00]' /usr/local/lib/config.txt; then
#DISABLE#                 sudo sed -i 's/^\(bram1\[00\]\)/g_appletalk_turbo = 1\n\n\1/' /usr/local/lib/config.txt
#DISABLE#             else
#DISABLE#                 echo -e '\ng_appletalk_turbo = 1' | sudo tee -a /usr/local/lib/config.txt > /dev/null
#DISABLE#             fi
#DISABLE#         fi
#DISABLE#         sudo sed -i 's/g_appletalk_turbo = 0/g_appletalk_turbo = 1/' /usr/local/lib/config.txt
#DISABLE# 
#DISABLE#         # enable Uthernet
#DISABLE#         if ! grep -q 'g_ethernet[^_]' /usr/local/lib/config.txt; then
#DISABLE#             if grep -q 'bram1[00]' /usr/local/lib/config.txt; then
#DISABLE#                 sudo sed -i 's/^\(bram1\[00\]\)/g_ethernet = 1\n\n\1/' config.txt
#DISABLE#             else
#DISABLE#                 echo -e '\ng_ethernet = 1' | sudo tee -a /usr/local/lib/config.txt > /dev/null
#DISABLE#             fi
#DISABLE#         fi
#DISABLE#         sudo sed -i 's/g_ethernet = 0/g_ethernet = 1/' /usr/local/lib/config.txt
#DISABLE#     else
#DISABLE#         [[ ! $isRpi ]] && echo "A2CLOUD: GSport is already installed."
#DISABLE#     fi
#DISABLE#     if [[ ! $isRpi ]]; then
#DISABLE#         echo "A2CLOUD: Updating GSport launch and setup files..."
#DISABLE# 
#DISABLE#         sudo addgroup gsport &> /dev/null
#DISABLE#         sudo chgrp gsport /usr/local/bin/gsportfb
#DISABLE#         sudo chmod u+s /usr/local/bin/gsportfb
#DISABLE#         sudo chgrp gsport /usr/local/bin/gsportx
#DISABLE#         sudo chmod u+s /usr/local/bin/gsportx
#DISABLE# 
#DISABLE#         sudo wget -qO /usr/local/bin/gsport ${scriptURL}setup/gsport.txt
#DISABLE#         sudo chmod ugo+x /usr/local/bin/gsport
#DISABLE#         sudo wget -qO /usr/local/bin/gsport-setup ${scriptURL}setup/gsport-setup-shell.txt
#DISABLE#         sudo chmod ugo+x /usr/local/bin/gsport-setup
#DISABLE#     fi
#DISABLE# 
#DISABLE# 
#DISABLE#     # LinApple
#DISABLE#     if ! command -v linapple >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing LinApple..."
#DISABLE#         cd /tmp/a2cloud-install
#DISABLE#         if [[ $downloadBinaries ]]; then
#DISABLE#             if [[ $isRpi ]]; then
#DISABLE#                 wget -qO- http://appleii.ivanx.com/a2cloud/files/linapple-rpi.tgz | sudo tar Pzx
#DISABLE#             elif [[ $isDebian ]]; then
#DISABLE#                 wget -qO- http://appleii.ivanx.com/a2cloud/files/linapple-debian7_x86.tgz | sudo tar Pzx
#DISABLE#             fi
#DISABLE#         fi
#DISABLE#         if ! command -v linapple >/dev/null; then
#DISABLE#             sudo apt-get -y install build-essential
#DISABLE#             sudo apt-get -y install libsdl1.2-dev libcurl4-openssl-dev zlib1g-dev libzip-dev
#DISABLE#             sudo apt-get -y clean
#DISABLE#             rm -rf /tmp/a2cloud-install/linapple* &> /dev/null
#DISABLE#             mkdir -p /tmp/a2cloud-install/linapple
#DISABLE#             cd /tmp/a2cloud-install/linapple
#DISABLE#             wget -q -O linapple.tar.bz2 http://downloads.sourceforge.net/project/linapple/linapple/linapple-2a/linapple-src_2a.tar.bz2
#DISABLE#             tar jxf linapple.tar.bz2
#DISABLE#             cd linapple-src_2a/src
#DISABLE#             # doesn't compile with gcc 4.7, so use older version
#DISABLE#             if (( $(g++ --version | head -1 | rev | cut -f 1 -d ' ' | rev | tr -d '.') >= 470 )); then
#DISABLE#                 sudo apt-get -y install g++-4.6
#DISABLE#                 sudo apt-get -y clean
#DISABLE#                 sed -i 's@CXX ?= c++@CXX = /usr/bin/g++-4.6@' Makefile
#DISABLE#             fi
#DISABLE#             make
#DISABLE#             sudo make install
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             rm -rf linapple
#DISABLE#         fi
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: LinApple is already installed."
#DISABLE#     fi
#DISABLE#     echo "A2CLOUD: Updating LinApple launch file..."
#DISABLE#     sudo wget -qO /usr/local/bin/linapple ${scriptURL}setup/linapple.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/linapple
#DISABLE# 
#DISABLE# fi
#DISABLE# 
#DISABLE# if [[ $installArchiveTools ]]; then
#DISABLE# 
#DISABLE#     if [[ ! -f /usr/local/bin/nulib2 || ! -f /usr/local/bin/sciibin || ! -f /usr/local/bin/usq ]]; then
#DISABLE#     if ! command -v nulib2 >/dev/null; then
#DISABLE# 
#DISABLE#         echo "A2CLOUD: Installing nulib2..."
#DISABLE# 
#DISABLE#         cd /tmp/a2cloud-install
#DISABLE#         if [[ $downloadBinaries ]]; then
#DISABLE#             if [[ $isRpi ]]; then
#DISABLE#                 wget -qO- http://appleii.ivanx.com/a2cloud/files/nulib2-rpi.tgz | sudo tar Pzx
#DISABLE#             elif [[ $isDebian ]]; then
#DISABLE#                 wget -qO- http://appleii.ivanx.com/a2cloud/files/nulib2-debian7_x86.tgz | sudo tar Pzx
#DISABLE#             fi
#DISABLE#         fi
#DISABLE#         if ! command -v nulib2 >/dev/null; then
#DISABLE#             sudo apt-get -y install build-essential
#DISABLE#             sudo apt-get -y install zlib1g-dev
#DISABLE#             sudo apt-get -y clean
#DISABLE# 
#DISABLE#             # install nulib2
#DISABLE#             rm -rf nulib &> /dev/null
#DISABLE#             mkdir -p nulib
#DISABLE#             cd nulib
#DISABLE#             wget -qO nulib.tgz http://web.archive.org/web/20131031160750/http://www.nulib.com/downloads/nulibdist.tar.gz
#DISABLE#             tar zxf nulib.tgz
#DISABLE#             cd nufxlib*
#DISABLE#             ./configure
#DISABLE#             make
#DISABLE#             sudo make install
#DISABLE#             cd ../nulib2*
#DISABLE#             ./configure
#DISABLE#             make
#DISABLE#             sudo make install
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             rm -rf nulib
#DISABLE#         fi
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: nulib2 is already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if ! command -v sciibin >/dev/null; then
#DISABLE# 
#DISABLE#         echo "A2CLOUD: Installing sciibin, unblu, unbit, unexec, usq..."
#DISABLE# 
#DISABLE#         sudo apt-get -y install build-essential
#DISABLE#         sudo apt-get -y clean
#DISABLE#         rm -rf undoit &> /dev/null
#DISABLE#         mkdir -p undoit
#DISABLE#         cd undoit
#DISABLE#         wget -q http://web.archive.org/web/20110619163030/http://fadden.com/dl-apple2/undoit.zip
#DISABLE#         unzip undoit.zip
#DISABLE#         make
#DISABLE#         sudo mv sciibin unbit unblu unexec usq /usr/local/bin
#DISABLE#         cd /tmp/a2cloud-install
#DISABLE#         rm -rf undoit
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: sciibin, unblu, unbit, unexec, usq are already installed."
#DISABLE#     fi
#DISABLE# 
#DISABLE#     echo "A2CLOUD: Setting up shk2image command..."
#DISABLE#     sudo wget -qO /usr/local/bin/shk2image ${scriptURL}setup/shk2image.txt
#DISABLE#     sudo chmod ugo+x /usr/local/bin/shk2image
#DISABLE# 
#DISABLE#     # download and install The Unarchiver, for expanding apple.com disk images
#DISABLE#     # http://wakaba.c3.cx/s/apps/unarchiver.html
#DISABLE#     if ! command -v unar >/dev/null; then
#DISABLE#         echo "A2CLOUD: Installing The Unarchiver..."
#DISABLE#         if apt-cache show unar &>/dev/null; then
#DISABLE#             sudo apt-get -y install unar
#DISABLE#         else
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             if [[ $downloadBinaries ]]; then
#DISABLE#                 if [[ $isRpi || $isDebian ]]; then
#DISABLE#                     sudo apt-get -y install libgnustep-base1.22
#DISABLE#                     sudo apt-get -y clean
#DISABLE#                     if [[ $isRpi ]]; then
#DISABLE#                         wget -qO- http://appleii.ivanx.com/a2cloud/files/unar-rpi.tgz | sudo tar Pzx
#DISABLE#                     elif [[ $isDebian ]]; then
#DISABLE#                         wget -qO- http://appleii.ivanx.com/a2cloud/files/unar-debian7_x86.tgz | sudo tar Pzx
#DISABLE#                     fi
#DISABLE#                 fi
#DISABLE#             fi
#DISABLE#             if ! command -v unar >/dev/null; then
#DISABLE#                 sudo apt-get -y install build-essential
#DISABLE#                 sudo apt-get -y install libgnustep-base-dev libz-dev libbz2-dev
#DISABLE#                 sudo apt-get -y install libssl-dev libicu-dev unzip
#DISABLE#                 sudo apt-get -y clean
#DISABLE#                 rm -rf unar &> /dev/null
#DISABLE#                 mkdir -p unar
#DISABLE#                 cd unar
#DISABLE#                 wget -q -nc http://theunarchiver.googlecode.com/files/unar1.7_src.zip
#DISABLE#                 unzip -o unar1.7_src.zip
#DISABLE#                 cd The\ Unarchiver/XADMaster
#DISABLE#                 make -f Makefile.linux
#DISABLE#                 sudo mv lsar unar /usr/local/bin
#DISABLE#                 cd ../Extra
#DISABLE#                 sudo mkdir -p /usr/local/man/man1
#DISABLE#                 sudo mv lsar.1 unar.1 /usr/local/man/man1
#DISABLE#                 cd /tmp/a2cloud-install
#DISABLE#                 rm -rf unar
#DISABLE#             fi
#DISABLE#             sudo mandb &> /dev/null
#DISABLE#         fi
#DISABLE#     else
#DISABLE#         echo "A2CLOUD: The Unarchiver is already installed."
#DISABLE#     fi
#DISABLE# fi
#DISABLE# 
#DISABLE# # add shortcuts to LXDE desktop and menu
#DISABLE# if command -v X >/dev/null; then
#DISABLE# 
#DISABLE#     [[ -d /etc/xdg/lxsession/LXDE-pi ]] && lxde="lxde-pi" || lxde="lxde"
#DISABLE#     echo "A2CLOUD: Creating LXDE desktop and menu shortcuts..."
#DISABLE# 
#DISABLE#     # remove auto-open Terminal window from pre-1.8.0
#DISABLE#     echo "A2CLOUD: removing auto-open LXDE terminal window (if present)..."
#DISABLE#     sudo rm /etc/xdg/autostart/lxterminal.desktop 2> /dev/null
#DISABLE# 
#DISABLE#     # create "AppleII" category
#DISABLE#     mkdir -p ~/.config/menus
#DISABLE#     if [[ ! -f ~/.config/menus/${lxde}-applications.menu ]]; then
#DISABLE#         mkdir -p ~/.config/menus
#DISABLE#         echo -e "<!DOCTYPE Menu PUBLIC \"-//freedesktop//DTD Menu 1.0//EN\" \"http://www.freedesktop.org/standards/menu-spec/1.0/menu.dtd\">\n<Menu>\n   <Name>A2CLOUD menu extension</Name>\n   <MergeFile type=\"parent\">/etc/xdg/menus/${lxde}-applications.menu</MergeFile>\n   <Menu>\n      <Name>Apple II</Name>\n      <Directory>lxde-appleii.directory</Directory>\n      <Include>\n         <And><Category>AppleII</Category></And>\n      </Include>\n   </Menu>\n</Menu>\n" > ~/.config/menus/${lxde}-applications.menu
#DISABLE#     else
#DISABLE#         grep -q AppleII ~/.config/menus/${lxde}-applications.menu || echo "A2CLOUD: LXDE child category file exists, not creating Apple II category."
#DISABLE#     fi
#DISABLE#     # create "Apple II" menu entry
#DISABLE#     sudo mkdir -p /usr/local/share/desktop-directories
#DISABLE#     echo -e "[Desktop Entry]\nName=Apple II\nComment=Programs and utilities related to the Apple II\nIcon=/usr/local/linapple/icon.bmp\nType=Directory\n" | sudo tee /usr/local/share/desktop-directories/lxde-appleii.directory > /dev/null
#DISABLE#     # create menu and desktop shortcuts
#DISABLE#     sudo mkdir -p /usr/local/share/applications
#DISABLE#     # create user desktop items folder
#DISABLE#     mkdir -p ~/Desktop
#DISABLE#     # GSport:
#DISABLE#     GSPORT_PATH="$(command -v gsport)"
#DISABLE#     if [ "$GSPORT_PATH" != "" ]; then
#DISABLE#         echo -e "[Desktop Entry]\nName=GSport\nComment=Apple IIgs Emulator\nExec=lxterminal -e $GSPORT_PATH\nIcon=/usr/local/share/gsport32.ico\nTerminal=false\nType=Application\nCategories=AppleII\n" | sudo tee /usr/local/share/applications/gsport.desktop > ~/Desktop/gsport.desktop
#DISABLE#     fi
#DISABLE#     if [[ ! -f /usr/local/share/gsport32.ico ]]; then
#DISABLE#         sudo wget -qO /usr/local/share/gsport32.ico http://appleii.ivanx.com/a2cloud/files/gsport32.ico
#DISABLE#     fi
#DISABLE#     # KEGS:
#DISABLE#     KEGS_PATH="$(command -v kegs)"
#DISABLE#     if [ "KEGS_PATH" != "" ]; then
#DISABLE#         echo -e "[Desktop Entry]\nName=KEGS\nComment=Apple IIgs Emulator\nExec=lxterminal -e $KEGS_PATH\nIcon=/usr/local/share/kegsicon.png\nTerminal=false\nType=Application\nCategories=AppleII\n" | sudo tee /usr/local/share/applications/kegs.desktop > /dev/null
#DISABLE#         [[ ! -f ~/Desktop/gsport.desktop ]] && cp /usr/local/share/applications/kegs.desktop ~/Desktop/kegs.desktop
#DISABLE#     fi
#DISABLE#     if [[ ! -f /usr/local/share/kegsicon.png ]]; then
#DISABLE#         sudo wget -qO /usr/local/share/kegsicon.png http://appleii.ivanx.com/a2cloud/files/kegsicon.png
#DISABLE#     fi
#DISABLE#     # LinApple:
#DISABLE#     LINAPPLE_PATH="$(command -v linapple)"
#DISABLE#     if [ "LINAPPLE_PATH" != "" ]; then
#DISABLE#         echo -e "[Desktop Entry]\nName=LinApple\nComment=Apple IIe Emulator\nExec=lxterminal -e $LINAPPLE_PATH\nIcon=/usr/local/linapple/icon.bmp\nTerminal=false\nType=Application\nCategories=AppleII\n" | sudo tee /usr/local/share/applications/linapple.desktop > ~/Desktop/linapple.desktop
#DISABLE#     fi
#DISABLE#     # ADTPro Server:
#DISABLE#     ADTPRO_PATH="$(command -v adtpro.sh)"
#DISABLE#     if [ "ADTPRO_PATH" != "" ]; then
#DISABLE#         echo -e "[Desktop Entry]\nName=ADTPro Server\nComment=Floppy Transfer Utility\nExec=$ADTPRO_PATH\nIcon=/usr/local/adtpro/lib/ADTPro.ico\nTerminal=false\nType=Application\nCategories=AppleII\n" | sudo tee /usr/local/share/applications/adtproserver.desktop > ~/Desktop/adtproserver.desktop
#DISABLE#     fi
#DISABLE#     # LXTerminal:
#DISABLE#     if [[ ! $(grep lxterminal.desktop /etc/xdg/lxpanel/profile/LXDE-pi/panels/panel 2> /dev/null) && ! -f ~/Desktop/lxterminal.desktop ]]; then
#DISABLE#         cp /usr/share/applications/lxterminal.desktop ~/Desktop/lxterminal.desktop
#DISABLE#     fi
#DISABLE#     # prevent PolicyKit error on GUI startup
#DISABLE#     sudo sed -i 's/^NotShowIn=GNOME;KDE;\?$/NotShowIn=GNOME;KDE;LXDE/' /etc/xdg/autostart/lxpolkit.desktop 2> /dev/null
#DISABLE#     sed -i 's/^NotShowIn=GNOME;KDE;\?$/NotShowIn=GNOME;KDE;LXDE/' /home/$USER/.config/autostart/lxpolkit.desktop 2> /dev/null
#DISABLE# fi
#DISABLE# 
#DISABLE# 
#DISABLE# # create A2CLOUD disk
#DISABLE# 
#DISABLE# if [[ ( $updateADTPro || $createBootDisk ) && -f /usr/local/bin/acmd ]]; then
#DISABLE#     a2CloudDisk=/usr/local/adtpro/disks/A2CLOUD.PO
#DISABLE# else
#DISABLE#     a2CloudDisk=
#DISABLE# fi
#DISABLE# 
#DISABLE# if [[ $a2CloudDisk ]]; then
#DISABLE#     echo
#DISABLE#     echo "A2CLOUD: Preparing A2CLOUD disk images..."
#DISABLE#     cd /tmp/a2cloud-install
#DISABLE#     a2CloudDisk140=${a2CloudDisk%%.*}.DSK
#DISABLE#     if [[ ! -f $a2CloudDisk && ! -f $a2CloudDisk140 ]]; then
#DISABLE#         makeA2CloudDisk=1
#DISABLE#     else
#DISABLE#         [[ -f $a2CloudDisk ]] && echo "A2CLOUD: $a2CloudDisk already exists."
#DISABLE#         [[ -f $a2CloudDisk140 ]] && echo "A2CLOUD: $a2CloudDisk140 already exists."
#DISABLE#         echo "  If you want a fresh copy, please move or delete as needed."
#DISABLE#         makeA2CloudDisk=
#DISABLE#     fi
#DISABLE# 
#DISABLE#     if [[ ! $makeA2CloudDisk ]]; then # not getting/building disks
#DISABLE# 
#DISABLE#         a2CloudDiskUpdated=
#DISABLE#         if [[ $updateADTPro && -f "$a2CloudDisk" ]]; then # does existing 800K disk need updating?
#DISABLE#             sudo pkill -f [A]DTPro
#DISABLE#             echo "A2CLOUD: Updating ADTPro and VDrive on 800K A2CLOUD disk..."
#DISABLE#             acmd -g /usr/local/adtpro/disks/VDRIVE-*DSK VEDRIVE -        | acmd -p "$a2CloudDisk" VEDRIVE SYS
#DISABLE#             acmd -g /usr/local/adtpro/disks/ADTPRO-*DSK ADTPROAUD -      | acmd -p "$a2CloudDisk" ADTPROAUD SYS
#DISABLE#             acmd -g /usr/local/adtpro/disks/ADTPRO-*DSK ADTPROETH -      | acmd -p "$a2CloudDisk" ADTPROETH SYS
#DISABLE#             acmd -g /usr/local/adtpro/disks/ADTPRO-*DSK ADTPRO.BIN -     | acmd -p "$a2CloudDisk" ADTPRO.BIN BIN \$0800
#DISABLE#             acmd -g /usr/local/adtpro/disks/ADTPRO-*DSK ADTPROAUD.BIN -  | acmd -p "$a2CloudDisk" ADTPROAUD.BIN SYS \$0800
#DISABLE#             acmd -g /usr/local/adtpro/disks/ADTPRO-*DSK ADTPROETH.BIN -  | acmd -p "$a2CloudDisk" ADTPROETH.BIN SYS \$0800
#DISABLE#             acmd -g /usr/local/adtpro/disks/VDRIVE-*DSK VEDRIVE.CONFIG - | acmd -p "$a2CloudDisk" VEDRIVE.CONFIG BAS
#DISABLE#             acmd -g /usr/local/adtpro/disks/ADTPRO-*DSK ADTPRO -         | acmd -p "$a2CloudDisk" ADTPRO SYS
#DISABLE#             acmd -g /usr/local/adtpro/disks/VDRIVE-*DSK VSDRIVE -        | acmd -p "$a2CloudDisk" VSDRIVE SYS
#DISABLE#             acmd -g /usr/local/adtpro/disks/VDRIVE-*DSK VSDRIVE.LOW -    | acmd -p "$a2CloudDisk" VSDRIVE.LOW SYS
#DISABLE#             a2CloudDiskUpdated=1
#DISABLE#         fi
#DISABLE#         if [[ $updateADTPro && -f "$a2CloudDisk140" ]]; then # does existing 140K disk need updating?
#DISABLE#             sudo pkill -f [A]DTPro
#DISABLE#             echo "A2CLOUD: Updating ADTPro and VDrive on 140K A2CLOUD disk..."
#DISABLE#             acmd -g /usr/local/adtpro/disks/ADTPRO-*DSK ADTPRO.BIN -     | acmd -p "$a2CloudDisk140" ADTPRO.BIN BIN \$0800
#DISABLE#             acmd -g /usr/local/adtpro/disks/ADTPRO-*DSK ADTPRO -         | acmd -p "$a2CloudDisk140" ADTPRO SYS
#DISABLE#             acmd -g /usr/local/adtpro/disks/VDRIVE-*DSK VSDRIVE -        | acmd -p "$a2CloudDisk140" VSDRIVE SYS
#DISABLE#             acmd -g /usr/local/adtpro/disks/VDRIVE-*DSK VSDRIVE.LOW -    | acmd -p "$a2CloudDisk140" VSDRIVE.LOW SYS
#DISABLE#             a2CloudDiskUpdated=1
#DISABLE#         fi
#DISABLE#         if [[ $a2CloudDiskUpdated ]]; then
#DISABLE#             echo
#DISABLE#             echo "Your A2CLOUD boot disk images have been updated. You may want"
#DISABLE#             echo "  to update your boot floppy with their current contents using ADTPro."
#DISABLE#         fi
#DISABLE#     echo
#DISABLE#     else # building or downloading disks
#DISABLE#         sudo pkill -f [A]DTPro
#DISABLE#         if [[ ! $buildA2CloudDisk ]]; then
#DISABLE#             echo "A2CLOUD: Downloading 800K disk image..."
#DISABLE#             wget -qO $a2CloudDisk http://appleii.ivanx.com/a2cloud/files/A2CLOUD.PO
#DISABLE#             echo "A2CLOUD: Downloading 140K disk image..."
#DISABLE#             wget -qO $a2CloudDisk140 http://appleii.ivanx.com/a2cloud/files/A2CLOUD.DSK
#DISABLE#         fi
#DISABLE# 
#DISABLE#         # build if we don't have a disk image
#DISABLE#         # (because download failed or -b argument was used)
#DISABLE#         if [[ ! -f $a2CloudDisk || ( $(wc -c $a2CloudDisk | cut -f 1 -d ' ') != "819200" ) ]]; then
#DISABLE# 
#DISABLE#             # start with a disk image
#DISABLE#             echo "A2CLOUD: Creating 800K disk image..."
#DISABLE#             cp /usr/local/adtpro/disks/ADTPRO-*PO $a2CloudDisk
#DISABLE#             acmd -n $a2CloudDisk A2CLOUD
#DISABLE# 
#DISABLE#             # ADTPro
#DISABLE#             echo "A2CLOUD: Preparing ADTPro..."
#DISABLE# 
#DISABLE#             acmd -d "$a2CloudDisk" BASIC
#DISABLE#             acmd -d "$a2CloudDisk" STARTUP.SYSTEM
#DISABLE#             acmd -d "$a2CloudDisk" ADTPRO
#DISABLE# 
#DISABLE#             gsosURL="http://download.info.apple.com/Apple_Support_Area/Apple_Software_Updates/English-North_American/Apple_II/Apple_IIGS_System_6.0.1/"
#DISABLE#             gsosBackupURL="http://archive.org/download/download.info.apple.com.2012.11/download.info.apple.com.2012.11.zip/download.info.apple.com%2FApple_Support_Area%2FApple_Software_Updates%2FEnglish-North_American%2FApple_II%2FApple_IIGS_System_6.0.1%2F"
#DISABLE# 
#DISABLE#             # start from ADTPro distribution image and replace BASIC.SYSTEM 1.4.1 with 1.5
#DISABLE#             wget --max-redirect 0 -qO Disk_3_of_7-SystemTools1.sea.bin ${gsosURL}Disk_3_of_7-SystemTools1.sea.bin
#DISABLE#             if (( $? != 0 )); then
#DISABLE#                 wget -qO Disk_3_of_7-SystemTools1.sea.bin ${gsosBackupURL}Disk_3_of_7-SystemTools1.sea.bin
#DISABLE#             fi
#DISABLE#             unar -k skip Disk_3_of_7-SystemTools1.sea.bin &> /dev/null
#DISABLE#             mv 'Disk 3 of 7-SystemTools1.sea' SystemTools1.dc42
#DISABLE#             acmd -g SystemTools1.dc42 BASIC.SYSTEM - | acmd -p "$a2CloudDisk" BASIC.SYSTEM SYS
#DISABLE#             # use our startup program
#DISABLE#             wget -qO- http://appleii.ivanx.com/a2cloud/files/STARTUP.BAS | acmd -p "$a2CloudDisk" STARTUP BAS
#DISABLE# 
#DISABLE#             # VEDRIVE
#DISABLE#             echo "A2CLOUD: Copying VEDRIVE..."
#DISABLE#             acmd -g /usr/local/adtpro/disks/VDRIVE-*DSK VEDRIVE -        | acmd -p "$a2CloudDisk" VEDRIVE SYS
#DISABLE#             acmd -g /usr/local/adtpro/disks/VDRIVE-*DSK VEDRIVE.CONFIG - | acmd -p "$a2CloudDisk" VEDRIVE.CONFIG BAS
#DISABLE# 
#DISABLE#             sysutilsURL="http://download.info.apple.com/Apple_Support_Area/Apple_Software_Updates/English-North_American/Apple_II/Apple_II_Supplemental/"
#DISABLE#             sysutilsBackupURL="http://archive.org/download/download.info.apple.com.2012.11/download.info.apple.com.2012.11.zip/download.info.apple.com%2FApple_Support_Area%2FApple_Software_Updates%2FEnglish-North_American%2FApple_II%2FApple_II_Supplemental%2F"
#DISABLE# 
#DISABLE#             # Apple System Utilities 3.1 support files
#DISABLE#             if command -v unar >/dev/null; then
#DISABLE#                 echo "A2CLOUD: Downloading and copying System Utilities support files..."
#DISABLE#                 cd /tmp/a2cloud-install
#DISABLE#                 wget --max-redirect 0 -qO Apple_II_System_Disk_3.2.sea.bin ${sysutilsURL}Apple_II_System_Disk_3.2.sea.bin
#DISABLE#                 if (( $? != 0 )); then
#DISABLE#                     wget -qO Apple_II_System_Disk_3.2.sea.bin ${sysutilsBackupURL}Apple_II_System_Disk_3.2.sea.bin
#DISABLE#                 fi
#DISABLE#                 unar -k skip Apple_II_System_Disk_3.2.sea.bin &> /dev/null
#DISABLE#                 dd if='Apple II System Disk 3.2.sea' of=A2SYSDISK32.PO bs=1 skip=84 count=819200 2> /dev/null
#DISABLE#                 acmd -g A2SYSDISK32.PO UTIL.0 - | acmd -p "$a2CloudDisk" UTIL.0 BIN \$0900
#DISABLE#                 acmd -g A2SYSDISK32.PO UTIL.1 - | acmd -p "$a2CloudDisk" UTIL.1 BIN \$0E00
#DISABLE#                 acmd -g A2SYSDISK32.PO UTIL.2 - | acmd -p "$a2CloudDisk" UTIL.2 BIN \$B400
#DISABLE#             else
#DISABLE#                 echo "A2CLOUD: unar is not available; not installing System Utilities support files."
#DISABLE#             fi
#DISABLE# 
#DISABLE#             # ProTERM
#DISABLE#             echo "A2CLOUD: Downloading ProTERM..."
#DISABLE#             wget --user-agent="Mozilla/5.0 (wget_A2CLOUD; rv:1.13.4) Gecko/20100101 Firefox/4.0.1" -qO /tmp/a2cloud-install/pt31.shk http://lostclassics.apple2.info/download/InTrec/PT31A2GM2K9.SHK
#DISABLE#             mkdir -p /tmp/a2cloud-install/pt31
#DISABLE#             cd /tmp/a2cloud-install/pt31
#DISABLE#             nulib2 -xse ../pt31.shk > /dev/null
#DISABLE#             # IIc slot 1 patch for ProTERM from Hugh Hood
#DISABLE#             echo "A2CLOUD: Patching ProTERM for IIc printer port use..."
#DISABLE#             writecharsHex "PT3.CODE0#060000" 1638 "41.70.70.6C.65.20.49.49.63.2F.49.49.63.2B.20.50.72.69.6E.74.65.72.20.50.6F.72.74.20.20.20.20.20.06.07.10.41.70.70.6C.65.20.49.49.63.2F.49.49.63.2B.20.4D.6F.64.65.6D.20.50.6F.72.74.20.20.20.20.20.20.20.06.07.20"
#DISABLE#             echo "A2CLOUD: Copying ProTERM..."
#DISABLE#             for thisFile in /tmp/a2cloud-install/pt31/*; do
#DISABLE#                 filenameUnix="${thisFile##*/}"
#DISABLE#                 filename="${filenameUnix%%#*}"
#DISABLE#                 filetype="${filenameUnix##*#}"
#DISABLE#                 if [[ $filename != "PT3.DIAL" && $filename != "ProDOS" && $filename != "PT3.BACKUP" && $filename != "PT3.SYSTEM" ]]; then
#DISABLE#                     acmd -p "$a2CloudDisk" $filename \$${filetype:0:2} \$${filetype:2:4} < $thisFile
#DISABLE#                 fi
#DISABLE#             done
#DISABLE#             acmd -p "$a2CloudDisk" PT3.DIAL/PTD.SPACEBAR COM \$8002 < /tmp/a2cloud-install/pt31/PT3.DIAL/"PTD.SPACEBAR#598002"
#DISABLE#             echo "A2CLOUD: Adding 115200 baud macros for ProTERM..."
#DISABLE#             wget -qO PT3.IIC.MACRO http://appleii.ivanx.com/a2cloud/files/PT3.IIC.MACRO.txt
#DISABLE#             cat "PT3.GLOBAL#040000" | tr '\r' '\n' | sed ':a;N;$!ba;s/\n\*\nOPTION-f : Unused & available.\n\*/~~~/' | sed -e '/~~~/r PT3.IIC.MACRO' -e 's///' | tr '\n' '\r' | acmd -p "$a2CloudDisk" PT3.IIC.GLOBAL TXT
#DISABLE#             wget -qO PT3.IIE.MACRO http://appleii.ivanx.com/a2cloud/files/PT3.IIE.MACRO.txt
#DISABLE#             cat "PT3.GLOBAL#040000" | tr '\r' '\n' | sed ':a;N;$!ba;s/\n\*\nOPTION-f : Unused & available.\n\*/~~~/' | sed -e '/~~~/r PT3.IIE.MACRO' -e 's///' | tr '\n' '\r' | acmd -p "$a2CloudDisk" PT3.IIE.GLOBAL TXT
#DISABLE#             wget -qO PT3.IIGS.MACRO http://appleii.ivanx.com/a2cloud/files/PT3.IIGS.MACRO.txt
#DISABLE#             cat "PT3.GLOBAL#040000" | tr '\r' '\n' | sed ':a;N;$!ba;s/\n\*\nOPTION-h : Unused & available.\n\*\n\n\*\nOPTION-H : Unused & available.\n\*/~~~/' | sed -e '/~~~/r PT3.IIGS.MACRO' -e 's///' | tr '\n' '\r' | acmd -p "$a2CloudDisk" PT3.IIGS.GLOBAL TXT
#DISABLE#             acmd -p "$a2CloudDisk" PROTERM SYS < /tmp/a2cloud-install/pt31/"PT3.SYSTEM#ff2000"
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             rm -rf /tmp/a2cloud-install/pt31
#DISABLE# 
#DISABLE#             # Z-Link
#DISABLE#             echo "A2CLOUD: Downloading and copying Z-Link..."
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             wget -qO /tmp/a2cloud-install/zlink.shk "ftp://ftp.gno.org/pub/apple2/prodos/comm/term/zLink91.shk"
#DISABLE#             nulib2 -p zlink.shk z.link.system | acmd -p "$a2CloudDisk" Z.LINK SYS
#DISABLE# 
#DISABLE#             # ShrinkIt
#DISABLE#             echo "A2CLOUD: Downloading and copying ShrinkIt..."
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             wget -qO shrinkit.sdk http://web.archive.org/web/20131031160750/http://www.nulib.com/library/shrinkit.sdk
#DISABLE#             [[ ! -f shrinkit.sdk ]] && wget -qO shrinkit.sdk http://appleii.ivanx.com/a2cloud/files/shrinkit.sdk
#DISABLE#             nulib2 -xs shrinkit.sdk > /dev/null
#DISABLE#             acmd -g /tmp/a2cloud-install/SHRINKIT SHRINKIT -        | acmd -p "$a2CloudDisk" SHRINKIT SYS
#DISABLE#             acmd -g /tmp/a2cloud-install/SHRINKIT SHRINKIT.SYSTEM - | acmd -p "$a2CloudDisk" SHRINKIT.SYS SYS
#DISABLE#             acmd -g /tmp/a2cloud-install/SHRINKIT IIPLUS.SHRINKIT - | acmd -p "$a2CloudDisk" IIPLUS.SHRINKIT SYS
#DISABLE#             acmd -g /tmp/a2cloud-install/SHRINKIT IIPLUS.UNSHRINK - | acmd -p "$a2CloudDisk" IIPLUS.UNSHRINK SYS
#DISABLE# 
#DISABLE#             # DSK2FILE
#DISABLE#             echo "A2CLOUD: Downloading and copying DSK2FILE..."
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             wget -q -O dsk2file.shk http://www.dwheeler.com/6502/oneelkruns/dsk2file.zip
#DISABLE#             nulib2 -p dsk2file.shk dsk2file58 | acmd -p "$a2CloudDisk" DSK2FILE SYS
#DISABLE# 
#DISABLE#             # Apple System Utilities 3.1 launch file
#DISABLE#             if command -v unar >/dev/null; then
#DISABLE#                 echo "A2CLOUD: Copying System Utilities launch file..."
#DISABLE#                 acmd -g A2SYSDISK32.PO SYSUTIL.SYSTEM - | acmd -p "$a2CloudDisk" SYSUTIL SYS
#DISABLE#             else
#DISABLE#                 echo "A2CLOUD: unar is not available; not installing System Utilities."
#DISABLE#             fi
#DISABLE# 
#DISABLE#            # Filer
#DISABLE#             echo "A2CLOUD: Downloading and copying Filer..."
#DISABLE#             wget -qO /tmp/a2cloud-install/mmgr.prutil.sdk ftp://ftp.gno.org/pub/apple2/prodos/comm/term/modem.mgr/mmgr.prutil.sdk
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             nulib2 -xs mmgr.prutil.sdk > /dev/null
#DISABLE#             acmd -g /tmp/a2cloud-install/MMGR FILER - | acmd -p "$a2CloudDisk" FILER SYS
#DISABLE# 
#DISABLE#             # ADTPRO launch
#DISABLE#             echo "A2CLOUD: Copying ADTPro launch file..."
#DISABLE#             acmd -g /usr/local/adtpro/disks/ADTPRO-*DSK ADTPRO - | acmd -p "$a2CloudDisk" ADTPRO SYS
#DISABLE# 
#DISABLE#             # VSDRIVE
#DISABLE#             if [[ ! $(acmd -ls "$a2CloudDisk" | grep '^VSDRIVE BIN') ]]; then
#DISABLE#                 echo "A2CLOUD: Copying VSDRIVE..."
#DISABLE#                 acmd -g /usr/local/adtpro/disks/VDRIVE-*DSK VSDRIVE - | acmd -p "$a2CloudDisk" VSDRIVE SYS
#DISABLE#                 acmd -g /usr/local/adtpro/disks/VDRIVE-*DSK VSDRIVE.LOW - | acmd -p "$a2CloudDisk" VSDRIVE.LOW BIN \$2000
#DISABLE#             else
#DISABLE#                 echo "A2CLOUD: VSDRIVE is already on the target disk image."
#DISABLE#             fi
#DISABLE# 
#DISABLE#         fi
#DISABLE# 
#DISABLE#         if [[ ! -f $a2CloudDisk140 || ( $(wc -c $a2CloudDisk140 | cut -f 1 -d ' ') != "143360" ) ]]; then
#DISABLE# 
#DISABLE#             echo "A2CLOUD: Creating 140K disk image..."
#DISABLE#             mkpo "$a2CloudDisk140" A2CLOUD
#DISABLE#             dd bs=256 count=1 of="$a2CloudDisk140" conv=notrunc 2> /dev/null < /usr/local/adtpro/disks/ADTPRO-*DSK
#DISABLE#             dd bs=256 count=1 of="$a2CloudDisk140" skip=14 seek=14 conv=notrunc 2> /dev/null < /usr/local/adtpro/disks/ADTPRO-*DSK
#DISABLE# 
#DISABLE#             acmd -g $a2CloudDisk BASIC.SYSTEM    - | acmd -p $a2CloudDisk140 BASIC.SYSTEM SYS
#DISABLE#             acmd -g $a2CloudDisk PRODOS          - | acmd -p $a2CloudDisk140 PRODOS SYS
#DISABLE#             acmd -g $a2CloudDisk STARTUP         - | acmd -p $a2CloudDisk140 STARTUP BAS
#DISABLE#             acmd -g $a2CloudDisk ADTPRO.BIN      - | acmd -p $a2CloudDisk140 ADTPRO.BIN BIN \$0800
#DISABLE#             acmd -g $a2CloudDisk Z.LINK          - | acmd -p $a2CloudDisk140 Z.LINK SYS
#DISABLE#             acmd -g $a2CloudDisk IIPLUS.SHRINKIT - | acmd -p $a2CloudDisk140 IIPLUS.SHRINKIT SYS
#DISABLE#             acmd -g $a2CloudDisk IIPLUS.UNSHRINK - | acmd -p $a2CloudDisk140 IIPLUS.UNSHRINK SYS
#DISABLE#             acmd -g $a2CloudDisk FILER           - | acmd -p $a2CloudDisk140 FILER SYS
#DISABLE#             acmd -g $a2CloudDisk ADTPRO          - | acmd -p $a2CloudDisk140 ADTPRO SYS
#DISABLE#             acmd -g $a2CloudDisk VSDRIVE         - | acmd -p $a2CloudDisk140 VSDRIVE SYS
#DISABLE#             acmd -g $a2CloudDisk VSDRIVE.LOW     - | acmd -p $a2CloudDisk140 VSDRIVE.LOW BIN \$2000
#DISABLE# 
#DISABLE#         fi
#DISABLE# 
#DISABLE#         # A2PI
#DISABLE#         if [[ ! $(acmd -ls "$a2CloudDisk" | grep '^  A2PI BIN') ]]; then
#DISABLE#             echo "A2CLOUD: Downloading and copying A2PI client..."
#DISABLE#             mkdir -p /tmp/a2cloud-install/a2pi
#DISABLE#             cd /tmp/a2cloud-install/a2pi
#DISABLE#             wget -qO a2pi.deb http://schmenk.is-a-geek.com/tarfiles/a2pi_armhf.deb
#DISABLE#             # dpkg-deb --fsys-tarfile a2pi.deb | tar --strip-components=4 --wildcards -O -x ./usr/share/a2pi/A2PI*.PO > A2PI.PO
#DISABLE#             dpkg-deb --fsys-tarfile a2pi.deb | tar --strip-components=4 --wildcards -x ./usr/share/a2pi/A2PI*.PO
#DISABLE#             a2piImage=$(ls -1r A2PI*.PO | head -1)
#DISABLE#             mkdir a2pidisk
#DISABLE#             cppo -e "$a2piImage" a2pidisk &> /dev/null
#DISABLE#             mv a2pidisk/A2PI* a2pidisk/A2PI
#DISABLE#             cd a2pidisk/A2PI
#DISABLE#             rm PRODOS* *A3* BASIC.SYSTEM*
#DISABLE#             cd ..
#DISABLE#             nulib2 -a -r -e ../a2pi.shk A2PI &> /dev/null
#DISABLE#             cd ..
#DISABLE#             shk2image a2pi.shk $a2CloudDisk &> /dev/null
#DISABLE#             shk2image a2pi.shk $a2CloudDisk140 &> /dev/null
#DISABLE#             cd /tmp/a2cloud-install
#DISABLE#             rm -rf a2pi
#DISABLE#         else
#DISABLE#             echo "A2CLOUD: A2PI client is already on the target disk image."
#DISABLE#         fi
#DISABLE# 
#DISABLE#         if [[ -f /usr/local/adtpro/disks/Virtual.po && ! -L /usr/local/adtpro/disks/Virtual.po ]]; then
#DISABLE#             mv /usr/local/adtpro/disks/Virtual.po /usr/local/adtpro/disks/defaultVirtual.po &> /dev/null
#DISABLE#             vsd1 -f /usr/local/adtpro/disks/defaultVirtual.po
#DISABLE#         fi
#DISABLE#         if [[ -f /usr/local/adtpro/disks/Virtual2.po && ! -L /usr/local/adtpro/disks/Virtual2.po ]]; then
#DISABLE#             if [[ $(sha1sum /usr/local/adtpro/disks/Virtual2.po | cut -d ' ' -f 1) == "41c178f9f596f94ea7607624672552137dccade2" ]]; then
#DISABLE#                 rm /usr/local/adtpro/disks/Virtual2.po
#DISABLE#             else
#DISABLE#                 mv /usr/local/adtpro/disks/Virtual2.po /usr/local/adtpro/disks/defaultVirtual2.po &> /dev/null
#DISABLE#             fi
#DISABLE#         fi
#DISABLE#         vsd2 -f $a2CloudDisk
#DISABLE# 
#DISABLE#         # for compatibility with pre-1.6.7
#DISABLE#         ln -s /usr/local/adtpro/disks/A2CLOUD.PO /usr/local/adtpro/disks/A2CLOUD.HDV
#DISABLE# 
#DISABLE#         echo
#DISABLE#         echo "Your A2CLOUD disk images are ready. They are called"
#DISABLE#         echo "A2CLOUD.DSK (140K) and A2CLOUD.PO (800K), and are stored in"
#DISABLE#         echo "/usr/local/adtpro/disks"
#DISABLE#         echo
#DISABLE#         echo "You can transfer to a floppy with ADTPro, or access"
#DISABLE#         echo "the 800K image with VSDRIVE at S2,D2."
#DISABLE#         echo
#DISABLE#         echo "See http://ivanx.com/a2cloud for more info."
#DISABLE#         echo
#DISABLE#     fi
#DISABLE# fi
#DISABLE# 
#DISABLE# 
#DISABLE# 
#DISABLE# # make new blank disk of specified size
#DISABLE# 
#DISABLE# if [[ $newImageName ]]; then
#DISABLE#     echo "A2CLOUD: Creating new ${imageSize}K image for virtual drive 1 at"
#DISABLE#     echo "  /usr/local/adtpro/disks/$newImageName..."
#DISABLE#     sudo pkill -f [A]DTPro
#DISABLE#     rm /usr/local/adtpro/disks/Virtual.po &> /dev/null
#DISABLE#     mkpo -b $(( $imageSize * 2 )) /usr/local/adtpro/disks/"$newImageName" $prodosVolName
#DISABLE#     vsd1 -f /usr/local/adtpro/disks/"$newImageName"
#DISABLE# fi
#DISABLE# 
#DISABLE# echo "wget -qO /tmp/a2cloud-setup http://appleii.ivanx.com/a2cloud/setup; source /tmp/a2cloud-setup" | sudo tee /usr/local/bin/a2cloud-setup > /dev/null
#DISABLE# sudo chmod ugo+x /usr/local/bin/a2cloud-setup
#DISABLE# 
#DISABLE# if [[ ! $restartPrompt ]]; then
#DISABLE#     adtpro-start 2> /dev/null #start ADTPro if not running and USB adapter attached
#DISABLE# fi
#DISABLE# 
#DISABLE# echo
#DISABLE# echo "A2CLOUD is now ready!"
#DISABLE# echo "See http://ivanx.com/a2cloud for instructions."
#DISABLE# 
#DISABLE# sudo apt-get -y clean
#DISABLE# 
#DISABLE# if [[ $restartPrompt ]]; then
#DISABLE#     echo
#DISABLE#     echo -n "Restart your $me now (not required, but recommended)? "
#DISABLE#     read
#DISABLE#     if [[ ${REPLY:0:1} == "Y" || ${REPLY:0:1} == "y" ]]; then
#DISABLE#         doRestart=1
#DISABLE#     fi
#DISABLE# fi
#DISABLE# 
#DISABLE# cd "$origDir"
#DISABLE# rm setup &> /dev/null
#DISABLE# rm a2cloud-setup &> /dev/null
#DISABLE# rm -rf /tmp/a2cloud-install &> /dev/null
#DISABLE# if command -v gsport >/dev/null || command -v kegs >/dev/null; then
#DISABLE#     sudo addgroup gsport &> /dev/null
#DISABLE#     sudo addgroup kegs &> /dev/null
#DISABLE#     sudo usermod -a -G audio,video,netdev,fuse,gsport,plugdev,kegs $USER &> /dev/null
#DISABLE#     [[ ! $noSetGroups ]] && { groups | grep -q 'kegs.*gsport\|gsport.*kegs' || exec sudo su -l $USER; }
#DISABLE# fi
#DISABLE# [[ $doRestart ]] && sudo shutdown -r now

# version history:

# future -- local links for everything
#            email
#            chromium

# version history:

# 1.8.1 -- set JAVA_HOME correctly for Java 8 (Pi, webupd8, Ubuntu for Pi 2B)
#          A2PI 1.5 (PiDrive update) on A2CLOUD disk
#          ADTPro 2.0.1 server, and 2.0.1 client on A2CLOUD disk

# 1.8.0d-- √ creates shortcuts on desktop for GSport, KEGS, LinApple, ADTPro server on x86
#          √ adds LXTerminal to desktop for non-A2Pi version
#          √ ProDOS instruction screen on GSOS install
#          √ provide via downloaded program that is dd notrunc'd over PRODOS (instead of writeCharsHex)
#          √ figure out why lines in autostart are supposed to start with @ (daemon; restarts command on crash)
#          √ install AppleCommander-1.3.5.13id (so Spectrum installer will work)
#          √ fix mouse not working in VirtualBox framebuffer
#          √  requires uninstalling (or temporarily disabling, if possible) VirtualBox guest additions
#          √ can be activated if vboxguest module is unloaded *while gsport is running*
#          √ offer to uninstall vboxguestmodule if gsport is in run console
#          √ rename slot6drive1 and 2 to not contain "-blank" in slot6.tgz and gsport and kegs (x86) archives
#          √ add links browser
#          √ fix webupd8team getting added twice to sources.list
#          √ install GSport for non-Pi
#          √ figure out how to replace Raspbian entry in OS json dynamically
#          √ command "a2cloud-update rasppleii" to update raspple ii
#          √ prevent samba update causing dialog to come up
#          √ create rasppleii-update
#          √ make rasppleii-update universal even for non-Raspple II installs -- it's just raspbian-update + a2cloud-update + a2server-update
#          √ creates shortcuts on desktop for GSport, KEGS, LinApple, ADTPro server on Pi
#          √ download gsport and kegs icons
#          √ no longer opens terminal window (since icons exist)
#          √   (remove /etc/xdg/autostart/lxterminal.desktop)
#          √ create aliases for raspbian-update and rasppleii-update
#          √ update A2CLOUD help file and aliases for GSport
#          √ create raspbian-update
#          √ update a2cloud-help
#          √ update motd (vm, raspple ii/a2cloud-pi) for gsport
#          √ see if shortcuts work in Raspple II 110
#          √ check for /etc/xdg/lxsession/LXDE-pi; if so:
#            √ create ~/.config/menus/lxde-pi-applications.menu, with reference to /etc/xdg/menus/lxde-pi-applications.menu
#            √ no xrandr VBOX0 on the Pi; remove it if present (a2cloud 1.7.x may have put it there)
#          √ user groups for pi user not only apple2
#          √ gsport-setup and kegs post install text to say ctrl-F12 for reboot
#          √ add "links" to motd and help
#          √ put a -Xmx128m in acmd so gsport and kegs setup work on Pi A/A+ (256 MB)
#          √ added 'disablesafemode' to NOOBS recovery.cmdline (also in raspbian-update) to make it work on (at least) my A+
#          √ option for GISK rather than clean setup for GSport on x86
#          √ provide actual command for clean GSOS + Spectrum install, which is what gsport runs if no HD available
#          √ provide command for clean GSOS install for KEGS
#          √ add Dave's preflight/postflight stuff (groups, ownership permissions) for gsport
#          √ install libpcap0.8-dev as part of Apple II Pi, GSport install, and GSport launcher
#          √ make kegs-setup
#          √ make kegs splash text
#          √ doesn't add VirtualBox 800x600 if installing on Pi
#          √ stop xrandr from being added multiple times to autostart in VirtualBox
#          √ only install vbox 800x600 if running in VirtualBox
#          √ disable screen blanking in vbox console
#          √ disable screensaver in vbox LXDE
#          √ disable screen blanking in vbox LXDE
#          √ don't create LXTerminal desktop shortcut if RPi
#          √ -6 arg provides empty ProDOS disks in S6D1 and S6D2 to GSport to speed things up
#          √ -6 arg provides empty ProDOS disks in S6D1 and S6D2 to KEGS to speed things up
#          √ can test if password is "raspberry" or "apple2" and advise accordingly
#          √ enable Uthernet by default in gsport-setup
#          √ enable AppleTalk Turbo by default in gsport-setup
#          √ make kegs run as root
#          √ consolidate gsport-setup and kegs-setup
#               √ gsport-setup is gsport, gsport-setup -k is kegs
#               √ clean up KEGS/GSport installer sections to be consistent
#               √ create kegs-setup placeholders that call gsport-setup -k
#          √ gsport-setup only offer system disks/GSport if java/acmd are available
#          √ suppress policykit error that appears after upgrade:
#               √ http://www.raspberrypi.org/forums/viewtopic.php?t=98617
#          √ see if uninstalling vbox additions is really necessary (nope)

#          √ A2SERVER: creates symlink to /usr/local/etc/netatalk in /etc
#          √ A2SERVER: -r no repo update option
#          √ A2SERVER: can test if password is "raspberry" or "apple2" and advise accordingly
#          √ A2SERVER: set AFP password to "apple2"
#          √ A2SERVER: automated Windows Sharing install option -w
#          √ A2SERVER: automate SMB password set
#          √ A2SERVER: fix bug where turning off windows sharing then on again made it not restart at startup
#          √ A2SERVER: turnkey (non-prompting) updater
#          √ A2SERVER: show current and available versions on run
#          √ A2SERVER: -v option to show version and exit
#          √ A2SERVER: -h shows help
#          √ A2SERVER: prefix status messages with A2SERVER:
#          √ A2SERVER: fixed OS X connection problems by adding dhx2 uams files to rpi and x86 tarballs
#          √ A2SERVER: set user password to "apple2"
#          √ A2SERVER: support a2server-update rasppleii
#          √ A2SERVER: automated netboot install option -b
#          √ A2SERVER: deletes /tmp/a2server-packageReposUpdated at end
#          √ A2SERVER: update help and aliases for raspbian-update
#          √ A2SERVER: update a2server-setup rasppleii
#          √ A2SERVER: add "a2server-update rasppleii"
#          √ A2SERVER: disable screen blanking in Debian VM console
#          √ A2SERVER: add raspbian-update and rasppleii-update

#          NOOBS:
#          √ get photo B slide into all NOOBS slides (even non-a version) and also upload to online
#          √ make NOOBS default to US keyboard (recovery.cmdline append lang=en keyboard=us)
#          √ make NOOBS-lite 1.4.0+ that can install Raspple II from net, use for upgrade
#          √  (change URL and default OS in noobs-master/recovery/config.h
#          √ change "raspple" option to 'os' or '-os'
#          √ remove silentinstall in raspbian-update
#          √ add 'disablesafemode' to recovery.cmdline in Raspple II and Raspple II Lite

#          √ make raspbian-update NOOBS-aware, both for standard NOOBS and Raspple II

# 1.7.2 -- manually triggers udev rules during startup if ttyusbhandler script didn't execute (which it doesn't in Raspbian 31-Jan-2015/Kernel 3.18)
#          doesn't provide Java space warning if java is already installed
#          A/A+ support (vsdrive on direct attach or hub port 3, console on hub port 2)

# 1.7.1 -- full undoit (unblu/unexec/unbit/usq/sciibin)
#          debian7_x86 and rpi binaries
#          perl version for ttytter not hardcoded
#          KEGS and LinApple support on debian_x86
#          kegs launch script creates additional symlink called ROM
#          linapple launch script sets up framebuffer and udev mouse rule
#          apt-get clean after all installs
#          installer option to compile all rather than download binaries
#          login message mentions A2SERVER if it is installed
#          LXDE terminal window now in global autostart (opens for any user)
#          LXDE desktop defaults to 800x600 if running in VirtualBox VM

# 1.7.0 -- Java 8

# 1.6.9 -- ADTPro 2.0.0
#          new A2CLOUD disks with A2PI client 1.8

# 1.6.8 -- ADTPro 1.3.0
#          tests for adtpro existence with either adtpro.sh or ADTPro.html
#          installs ttytter from its home page, not via apt-get (because it's in non-free, which is not enabled by default in debian)

# 1.6.7 -- cppo installed from a2cloud directory on web server (a2server has symlink)
#          fixed cppo -e bug that always created a resource fork file even if there is no resource fork
#          shk2image leaves nothing behind in /tmp
#          wildcard copy all files on A2PI disk except PRODOS/BASIC.SYSTEM/*A3* to A2CLOUD disks when building
#        @ √ new A2CLOUD disks with A2PI client 1.4
#          % update before install for a2chat/a2news/kegs/kegs-setup/linapple/gsport/gsport-setup
#          disables IPv6 for exim4 to properly prevent startup error messages; restores log folder if not there
#       ^@ A2CLOUD.HDV is now A2CLOUD.PO (with symlink to A2CLOUD.HDV)
#          √ renamed MACRO files on server to be .txt and moved to files
#       ^@ √ new startup app on disk to make it easier to get to A2PI
#          a2cloud-setup updates a2news/a2chat/kegs/kegs-setup/linapple wrappers
#          added screen to a2cloud-help

# 1.6.6 -- installs Screen
#          installs curl if not installed (for ttytter)
#          ttytter alias works correctly if run under Screen
#          a2cloudrc is now downloaded rather than created by script
#          LANG is now set in /usr/local/etc/a2cloud-lang rather than in a2cloudrc
#          fixed bug which checked for nulib2 instead of unar when seeing if needing to compile
#          opens terminal window in lxde on startup
#          setup -v displays available and installed versions
#          setup -y now bypasses all prompts; -n removed
#          % setup exits properly whether run via source or shell
#          moved cftp to files
#          support for x86 Debian/Ubuntu:
#              compiles binaries rather than downloads if not running on Pi
#              gets and supports Oracle x86 Java if not on Pi
#              installs X11 and LXDE if not installed
#              ttyUSBupper is always ttyUSB0, ttyUSBlower is always ttyUSB1
#              adtpro.sh supports USB-to-serial on all architectures

# 1.6.5 -- term command accepts mono/color/none as synonyms for vt100/pcansi/dumb
#          minor reorganization of configuration of a2cloudrc and screenrc

# 1.6.4 -- term command has -f argument to force action
#          bash.bashrc now calls /usr/local/etc/a2cloudrc, which calls a2cloud-aliases
#          support for screen command (preserves TERM environment variable in new screen)

# 1.6.3 -- sets ttytter to use ssl, and also 7-bit on serial port login, and ansi
#          if using TERM=pcansi. Also provides Term::ReadLine::TTYtter for -readline option
#          revised command line options and prompt for installing all or selective
#          added appleiipi-update command

# 1.6.2 -- installs ISO-8859 (8-bit) character set for serial port login
#          adds 'term' command for setting vt100 or ANSI emulation
#          apt-get clean at end of A2CLOUD install
#          installs sciibin and unblu
#          a2cloud-update alias to a2cloud-setup
#          300 baud support by 'baud'
#          prevents gsport (A2PI) from running when invoked from serial port
#          cmd line option and prompt to install either all, or select individual
#          revised intro language

# 1.6.1 -- installs telnet and ttytter
#          prevents exim4 error messages after Tin installation

# 1.6.0 -- checks for ADTPro update
#          updates ADTPro server and client software
#          put adtpro version number into variable and removed hardcoding elsewhere
#          asks for prodos volume name for new disk image; 8192 max
#          fixed order of files on 140K disk to be consistent with 800K disk
#          adtpro-start start now checks for USB adapter before starting
#          restarts ADTPro server on vsd1/vsd2 after prompting
#          created vsdsync alias to adtpro-restart; acmd warns if neeed
#          acmd warns if vsd1/vsd2 changes, and advises vsdsync if so
#          acmd now provides acmd help even on AppleCommander error

# 1.6.0 beta

#(unreleased)
# 1.5.3 -- gets motd from web
#          prevents /var/log/exim4/paniclog from filling up
#          sets password to apple2
#          shares /usr/local/adtpro/disks to AFP & SMB
#          don't prompt for restart after install by default
#          avahi-daemon installed
#          backup server for shrinkit

# 1.5.2 -- cleans up at end, downloads disks, full A2PI including extras,
#           bug fixes, -h for options

# 1.5.1 -- added dos2pro

# 1.5  -- provides a2chat, a2news, kegs, linapple, a2pi

# 1.23 -- support for new A2PI client

# 1.22 -- downloads base gnustep library for unar/lsar, not full dev packages;
#         will still download those and build if binary isn't available for some reason
#         same goes for nulib2 and cftp. Should make for speedier install.
#         adds A2PI client software to A2CLOUD disk
#         disables console getty
#         installs xrdp
#         adds DSK2FILE to A2CLOUD disk

# 1.7.2 -- manually triggers udev rules during startup if ttyusbhandler script didn't execute (which it doesn't in Raspbian 31-Jan-2015/Kernel 3.18)
#          doesn't provide Java space warning if java is already installed
#          A/A+ support (vsdrive on direct attach or hub port 3, console on hub port 2)

# 1.7.1 -- full undoit (unblu/unexec/unbit/usq/sciibin)
#          debian7_x86 and rpi binaries
#          perl version for ttytter not hardcoded
#          KEGS and LinApple support on debian_x86
#          kegs launch script creates additional symlink called ROM
#          linapple launch script sets up framebuffer and udev mouse rule
#          apt-get clean after all installs
#          installer option to compile all rather than download binaries
#          login message mentions A2SERVER if it is installed
#          LXDE terminal window now in global autostart (opens for any user)
#          LXDE desktop defaults to 800x600 if running in VirtualBox VM

# 1.7.0 -- Java 8

# 1.6.9 -- ADTPro 2.0.0
#          new A2CLOUD disks with A2PI client 1.8

# 1.6.8 -- ADTPro 1.3.0
#          tests for adtpro existence with either adtpro.sh or ADTPro.html
#          installs ttytter from its home page, not via apt-get (because it's in non-free, which is not enabled by default in debian)

# 1.6.7 -- cppo installed from a2cloud directory on web server (a2server has symlink)
#          fixed cppo -e bug that always created a resource fork file even if there is no resource fork
#          shk2image leaves nothing behind in /tmp
#          wildcard copy all files on A2PI disk except PRODOS/BASIC.SYSTEM/*A3* to A2CLOUD disks when building
#        @ √ new A2CLOUD disks with A2PI client 1.4
#          % update before install for a2chat/a2news/kegs/kegs-setup/linapple/gsport/gsport-setup
#          disables IPv6 for exim4 to properly prevent startup error messages; restores log folder if not there
#       ^@ A2CLOUD.HDV is now A2CLOUD.PO (with symlink to A2CLOUD.HDV)
#          √ renamed MACRO files on server to be .txt and moved to files
#       ^@ √ new startup app on disk to make it easier to get to A2PI
#          a2cloud-setup updates a2news/a2chat/kegs/kegs-setup/linapple wrappers
#          added screen to a2cloud-help

# 1.6.6 -- installs Screen
#          installs curl if not installed (for ttytter)
#          ttytter alias works correctly if run under Screen
#          a2cloudrc is now downloaded rather than created by script
#          LANG is now set in /usr/local/etc/a2cloud-lang rather than in a2cloudrc
#          fixed bug which checked for nulib2 instead of unar when seeing if needing to compile
#          opens terminal window in lxde on startup
#          setup -v displays available and installed versions
#          setup -y now bypasses all prompts; -n removed
#          % setup exits properly whether run via source or shell
#          moved cftp to files
#          support for x86 Debian/Ubuntu:
#              compiles binaries rather than downloads if not running on Pi
#              gets and supports Oracle x86 Java if not on Pi
#              installs X11 and LXDE if not installed
#              ttyUSBupper is always ttyUSB0, ttyUSBlower is always ttyUSB1
#              adtpro.sh supports USB-to-serial on all architectures

# 1.6.5 -- term command accepts mono/color/none as synonyms for vt100/pcansi/dumb
#          minor reorganization of configuration of a2cloudrc and screenrc

# 1.6.4 -- term command has -f argument to force action
#          bash.bashrc now calls /usr/local/etc/a2cloudrc, which calls a2cloud-aliases
#          support for screen command (preserves TERM environment variable in new screen)

# 1.6.3 -- sets ttytter to use ssl, and also 7-bit on serial port login, and ansi
#          if using TERM=pcansi. Also provides Term::ReadLine::TTYtter for -readline option
#          revised command line options and prompt for installing all or selective
#          added appleiipi-update command

# 1.6.2 -- installs ISO-8859 (8-bit) character set for serial port login
#          adds 'term' command for setting vt100 or ANSI emulation
#          apt-get clean at end of A2CLOUD install
#          installs sciibin and unblu
#          a2cloud-update alias to a2cloud-setup
#          300 baud support by 'baud'
#          prevents gsport (A2PI) from running when invoked from serial port
#          cmd line option and prompt to install either all, or select individual
#          revised intro language

# 1.6.1 -- installs telnet and ttytter
#          prevents exim4 error messages after Tin installation

# 1.6.0 -- checks for ADTPro update
#          updates ADTPro server and client software
#          put adtpro version number into variable and removed hardcoding elsewhere
#          asks for prodos volume name for new disk image; 8192 max
#          fixed order of files on 140K disk to be consistent with 800K disk
#          adtpro-start start now checks for USB adapter before starting
#          restarts ADTPro server on vsd1/vsd2 after prompting
#          created vsdsync alias to adtpro-restart; acmd warns if neeed
#          acmd warns if vsd1/vsd2 changes, and advises vsdsync if so
#          acmd now provides acmd help even on AppleCommander error

# 1.6.0 beta

#(unreleased)
# 1.5.3 -- gets motd from web
#          prevents /var/log/exim4/paniclog from filling up
#          sets password to apple2
#          shares /usr/local/adtpro/disks to AFP & SMB
#          don't prompt for restart after install by default
#          avahi-daemon installed
#          backup server for shrinkit

# 1.5.2 -- cleans up at end, downloads disks, full A2PI including extras,
#           bug fixes, -h for options

# 1.5.1 -- added dos2pro

# 1.5  -- provides a2chat, a2news, kegs, linapple, a2pi

# 1.23 -- support for new A2PI client

# 1.22 -- downloads base gnustep library for unar/lsar, not full dev packages;
#         will still download those and build if binary isn't available for some reason
#         same goes for nulib2 and cftp. Should make for speedier install.
#         adds A2PI client software to A2CLOUD disk
#         disables console getty
#         installs xrdp
#         adds DSK2FILE to A2CLOUD disk
